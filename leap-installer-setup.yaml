AWSTemplateFormatVersion: '2010-09-09'
Description: 'LEAP Stacks installer v2.0 by Basil Fateen'

Parameters:
  AdminEmail:
    Type: String
    Description: (REQUIRED) Email address for the admin user
    Default: admin@example.com

  StackCode:
    Type: String
    Description: UniqueID
    Default: leapv1
  
  InitialPassword:
    Type: String
    Description: (REQUIRED) Set password for the admin user (8+ chars, uppercase & lowercase letters, numbers, special chars)
    MinLength: 8
    NoEcho: true
    AllowedPattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*])[a-zA-Z\\d!@#$%^&*]{8,}$"
  

Resources:
  # S3 Bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  #SECURED s3
  # S3 Bucket Cleanup Function
  WebsiteCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3CleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                Resource: 
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  WebsiteCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt WebsiteCleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import time

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def delete_bucket_contents(bucket_name):
              try:
                  logger.info(f"Starting cleanup of bucket: {bucket_name}")
                  s3 = boto3.client('s3')
                  
                  # Delete all object versions
                  paginator = s3.get_paginator('list_object_versions')
                  pages = paginator.paginate(Bucket=bucket_name)
                  
                  delete_list = []
                  
                  try:
                      for page in pages:
                          # Handle versions
                          if 'Versions' in page:
                              for version in page['Versions']:
                                  delete_list.append({
                                      'Key': version['Key'],
                                      'VersionId': version['VersionId']
                                  })
                          
                          # Handle delete markers
                          if 'DeleteMarkers' in page:
                              for marker in page['DeleteMarkers']:
                                  delete_list.append({
                                      'Key': marker['Key'],
                                      'VersionId': marker['VersionId']
                                  })
                          
                          if delete_list:
                              logger.info(f"Deleting {len(delete_list)} objects")
                              s3.delete_objects(
                                  Bucket=bucket_name,
                                  Delete={'Objects': delete_list}
                              )
                              delete_list = []
                      
                      # Final check for non-versioned objects
                      paginator = s3.get_paginator('list_objects_v2')
                      pages = paginator.paginate(Bucket=bucket_name)
                      
                      for page in pages:
                          if 'Contents' in page:
                              objects = [{'Key': obj['Key']} for obj in page['Contents']]
                              if objects:
                                  logger.info(f"Deleting {len(objects)} non-versioned objects")
                                  s3.delete_objects(
                                      Bucket=bucket_name,
                                      Delete={'Objects': objects}
                                  )
                      
                      logger.info(f"Successfully cleaned up bucket: {bucket_name}")
                      return True
                      
                  except Exception as e:
                      logger.error(f"Error during deletion: {str(e)}")
                      return False
                      
              except Exception as e:
                  logger.error(f"Error accessing bucket: {str(e)}")
                  return False

          def handler(event, context):
              logger.info('Received event: %s', event)
              response_data = {}
              
              try:
                  bucket_name = event['ResourceProperties']['BucketName']
                  
                  if event['RequestType'] == 'Delete':
                      # Attempt cleanup multiple times
                      max_attempts = 3
                      for attempt in range(max_attempts):
                          logger.info(f"Cleanup attempt {attempt + 1} of {max_attempts}")
                          if delete_bucket_contents(bucket_name):
                              break
                          if attempt < max_attempts - 1:
                              time.sleep(5)  # Wait before retry
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
              except Exception as e:
                  logger.error(f"Error in handler: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

      Runtime: python3.11
      Timeout: 300  # Increased timeout to 5 minutes
      MemorySize: 256  # Increased memory

  BucketCleanupResource:
    Type: Custom::S3Cleanup
    DependsOn: WebsiteBucket
    Properties:
      ServiceToken: !GetAtt WebsiteCleanupFunction.Arn
      BucketName: !Ref WebsiteBucket
      


  # Cognito User Pool with Hosted UI
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${StackCode}-users
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${StackCode}-${AWS::Region}-${AWS::AccountId}-auth
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${StackCode}-client
      GenerateSecret: false
      CallbackURLs: 
        - !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/callback
      LogoutURLs:
        - !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/signout
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      

  # Lambda for URL signing and callback handling
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:TagResource
                  - cloudformation:CreateChangeSet
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:CreateServiceLinkedRole
                  - iam:PutRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:TagRole
                  - iam:CreateUser
                  - iam:DeleteUser
                  - iam:GetUser
                  - iam:ListUsers
                  - iam:UpdateUser
                  - iam:TagUser
                  - iam:UntagUser
                  - iam:CreateLoginProfile
                  - iam:DeleteLoginProfile
                  - iam:GetLoginProfile
                  - iam:UpdateLoginProfile
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:AttachUserPolicy
                  - iam:DetachUserPolicy
                  - iam:ListAttachedUserPolicies
                  - iam:PutUserPolicy
                  - iam:DeleteUserPolicy
                  - iam:ListUserPolicies
                  - iam:PassRole     
                  - iam:GetUserPolicy    
                Resource: '*'
              - Effect: Allow
                Action:
                  - tag:GetResources
                  - tag:TagResources
                  - tag:UntagResources
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'ApiGateway:*'
                  - 'bedrock:*'
                  - 'lambda:*'
                  - 'secretsmanager:*'
                  - 'aoss:*'
                  - 'cognito-idp:*'
                  - 'states:CreateStateMachine'
                  - 'states:StartExecution'
                  - 'dynamodb:*'
                Resource: '*'

  AuthHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import urllib.parse
          
          def handler(event, context):
              path = event['path']
              
              if path == '/callback':
                  # Handle OAuth callback
                  code = event['queryStringParameters'].get('code')
                  if not code:
                      return {
                          'statusCode': 302,
                          'headers': {
                              'Location': f"https://{os.environ['COGNITO_DOMAIN']}/login"
                          }
                      }
                  
                  # Generate signed URL for protected content
                  s3 = boto3.client('s3')
                  url = s3.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': os.environ['BUCKET_NAME'],
                          'Key': 'protected.html'
                      },
                      ExpiresIn=604800
                  )
                  
                  return {
                      'statusCode': 302,
                      'headers': {
                          'Location': url
                      }
                  }
              
              elif path == '/signout':
                  # Handle sign out
                  return {
                      'statusCode': 302,
                      'headers': {
                          'Location': f"https://{os.environ['COGNITO_DOMAIN']}/logout"
                      }
                  }
              
              # Default: redirect to Cognito login
              return {
                  'statusCode': 302,
                  'headers': {
                      'Location': f"https://{os.environ['COGNITO_DOMAIN']}/login?response_type=code&client_id={os.environ['CLIENT_ID']}&redirect_uri={urllib.parse.quote(os.environ['CALLBACK_URL'])}"
                  }
              }
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucket
          COGNITO_DOMAIN: !Sub ${StackCode}-${AWS::Region}-${AWS::AccountId}-auth.auth.${AWS::Region}.amazoncognito.com
          CLIENT_ID: !Ref UserPoolClient
          CALLBACK_URL: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/callback

  # API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${StackCode}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Add root method (for base URL)
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandlerFunction.Arn}/invocations
      ResourceId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api

  # Proxy resource for all other paths
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref Api

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandlerFunction.Arn}/invocations
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref Api

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - RootMethod
      - ProxyMethod
      - UserPoolDomain        
      - UserPoolClient       
      - CreateCognitoUser     
      - WebAppFile
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: prod

  # Lambda permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthHandlerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  # Content uploader
  ContentUploaderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub ${WebsiteBucket.Arn}/*


  WebAppFile:
    Type: 'Custom::S3Object'
    DependsOn: GetGithubRepoApiDeployment
    Properties:
      ServiceToken: !GetAtt ContentUploader.Arn
      BucketName: !Ref WebsiteBucket
      Key: index.html
      Body: !Sub |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Cloud Prototype Launcher</title>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
            <style>
                :root {
                    --primary-bg: #f0f2f5;
                    --card-bg: #ffffff;
                    --primary-text: #1a1a1a;
                    --secondary-text: #666666;
                    --accent-color: #0066cc;
                    --border-radius: 12px;
                    --spacing: 20px;
                }

                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                    background-color: var(--primary-bg);
                    color: var(--primary-text);
                    line-height: 1.6;
                    /*padding: var(--spacing);*/
                }

                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    display: flex;
                    gap: var(--spacing);
                }

                .main-column {
                    flex: 7;
                }

                .side-column {
                    flex: 3;
                }

                .card {
                    background: var(--card-bg);
                    border-radius: var(--border-radius);
                    padding: var(--spacing);
                    margin-bottom: var(--spacing);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    transition: transform 0.2s, box-shadow 0.2s;
                }

                .prototype-card {
                    /*cursor: pointer;*/
                }

                .prototype-card:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                }

                .card-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }

                .card-icon {
                    width: 48px;
                    height: 48px;
                    margin-right: 15px;
                    border-radius: 8px;
                }

                .card-title {
                    font-size: 1.2rem;
                    font-weight: 600;
                    margin-bottom: 4px;
                }

                .card-services {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 8px;
                    margin-top: 10px;
                }

                .service-tag {
                    background: #e1e8ff;
                    color: #0044aa;
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 0.85rem;
                }

                .explainer-link{
                text-decoration:none;
                color: #0044aa;
                }

                .progress-bar {
                    display: none;
                    height: 6px;
                    background: #e1e8ff;
                    border-radius: 3px;
                    overflow: hidden;
                    margin: 20px 0;
                }

                .progress-fill {
                    height: 100%;
                    background: var(--accent-color);
                    width: 0%;
                    transition: width 0.3s ease;
                }

                .video-container {
                    position: relative;
                    padding-bottom: 15px;
                    height: 0;
                    overflow: hidden;
                }

                .video-container img {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                }

                .cost-card {
                    background: linear-gradient(135deg, #0066cc, #0044aa);
                    color: white;
                }

                .total-cost {
                    /*font-size: 2rem;*/
                    font-weight: 600;
                    margin: 10px 0;
                }

                .architecture-diagram {
                    display: none;
                    padding: 20px;
                    margin-top: 20px;
                }

                .services-flow {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: center;
                    gap: 20px;
                    position: relative;
                    padding: 20px 0;
                }

                .service-node {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    position: relative;
                    width: 120px;
                    cursor: pointer;
                }

                .service-icon {
                    width: 64px;
                    height: 64px;
                    background: #f5f5f5;
                    border-radius: 8px;
                    padding: 8px;
                    margin-bottom: 8px;
                    border: 2px solid #e1e8ff;
                }

                .service-name {
                    text-align: center;
                    font-weight: 500;
                    font-size: 0.9rem;
                }

                .service-arrow {
                    position: absolute;
                    top: 32px;
                    right: -24px;
                    width: 28px;
                    height: 2px;
                    background-color: #0066cc;
                }

                .service-arrow::after {
                    content: '';
                    position: absolute;
                    right: 0;
                    top: -4px;
                    border: 5px solid transparent;
                    border-left-color: #0066cc;
                }

                .deployment-info {
                    display: none;
                }

                .deployment-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 15px;
                    padding: 10px 0;
                    border-bottom: 1px solid #eee;
                }

                .deployment-status {
                    color: #00aa44;
                    font-weight: 500;
                    display: flex;
                    align-items: center;
                    gap: 6px;
                }

                .status-dot {
                    width: 8px;
                    height: 8px;
                    background-color: #00aa44;
                    border-radius: 50%;
                }

                .prototype-card.expanded {
                    /*min-height: 300px;*/
                }

                .prototype-card h3{
                display:none;
                }
                .prototype-card.expanded h3{
                display:block;
                }

                .service-desc{
                    display:none;
                }

                .service-node:hover .service-desc{
                    display:block;
                }
                 .truncated-link {
                display: inline-block;
                max-width: 500px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }

              .launchbut{
              padding:5px 10px;margin-top:30px;float:right;background:#002194;color:white;border-radius:7px;text-decoration:none;
              }
              .deletebut{
                            padding:5px 10px;margin-top:0px;float:right;background:#fe3549;color:white;border-radius:7px;text-decoration:none;
              }

              
              .overlay {
                  display: none;
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background-color: rgba(0, 0, 0, 0.6);
                  z-index: 9999;
              }

              .modal-popup {
                  position: absolute;
                  top: 50%;
                  left: 50%;
                  transform: translate(-50%, -50%);
                  background-color: white;
                  padding: 20px;
                  border-radius: 8px;
                  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                  max-width: 600px;
                  width: 90%;
              }

              #modal-title {
                  margin: 0 0 15px 0;
                  color: #333;
                  font-size: 1.5em;
              }

              #modal-message {
                  margin-bottom: 20px;
                  color: #666;
              }

              .models-table {
                  width: 100%;
                  overflow-x: auto;
              }

              .models-table table {
                  width: 100%;
                  border-collapse: collapse;
              }

              .models-table th,
              .models-table td {
                  padding: 12px;
                  text-align: left;
                  border-bottom: 1px solid #eee;
              }

              .models-table th {
                  background-color: #f5f5f5;
                  font-weight: 600;
              }

              .status-enabled {
                  color: #00aa44;
                  font-weight: 500;
              }

              .status-disabled {
                  color: #ff4444;
                  font-weight: 500;
              }

              .enable-button {
                  padding: 6px 12px;
                  background-color: #0066cc;
                  color: white;
                  border: none;
                  border-radius: 4px;
                  cursor: pointer;
                  text-decoration: none;
                  display: inline-block;
              }

              .enable-button:hover {
                  background-color: #0052a3;
              }

              .deployment-links a {
                color: #2563eb; /* Tailwind blue-600 */
                text-decoration: none;
                font-weight: 500;
                /* position:relative;top:7px;*/
              }
              .deployment-links a:hover {
                text-decoration: underline;
                color: #1d4ed8;
              }

                .special-btn {
                display: inline-block;
                background-color: #2563eb; /* Blue-600 */
                color: white !important;
                font-weight: 600;
                font-size: 16px;
                padding: 10px 18px;
                border: none;
                border-radius: 10px;
                text-align: center;
                text-decoration: none;
                cursor: pointer;
                transition: background-color 0.3s ease;
                margin-top: 10px;
                margin-right:10px;
                }

                .special-btn:hover {
                background-color: #1e40af; /* Blue-800 */
                }

                .service-tag:hover{
                background:rgba(40,93,255,.08);  /* subtle fill */
                transform:translateY(-2px);
                box-shadow:0 3px 10px -2px rgba(40,93,255,.3);
                }
            </style>
                <script src="https://kit.fontawesome.com/f9bafd29df.js" crossorigin="anonymous"></script>

        </head>
        <body style="background:#f0eeef !important">
        <style>    .top-nav {
            width: 100%;
            background-color: #000;
            padding: 15px 0;
            margin-bottom:20px;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .logo {
            color: #fff;
            font-size: 24px;
            font-weight: bold;
            text-decoration: none;
        }

        .signup-btn {
            background: #0066cc;
            color: #fff;
            padding: 8px 20px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 500;
        }

        .signup-btn:hover {
            background: #0052a3;
        }
        </style>
        <div class="top-nav">
            <div class="nav-container">
                <a href="#" class="logo"><!--<img src="https://www.pikpng.com/pngl/b/524-5240809_aws-logo-svg-white-clipart.png" style="width:auto;height:25px;position:relative;top:5px;margin-right:10px;">-->LEAP Stacks</a>
                   <div>
                    <div class="toggle-container" style="width:140px;display:inline-block;color:white;">
                      <label class="switch">
                          <input type="checkbox" onchange="handleToggle(this)" checked>
                          <span class="slider round"></span>
                          
                      </label>
                      auto-destroy
                  </div>
                  
                  <style>
                      .switch {
                          position: relative;
                          top:3px;
                          display: inline-block;
                          width: 30px;
                          height: 17px;
                      }
                  
                      .switch input {
                          opacity: 0;
                          width: 0;
                          height: 0;
                      }
                  
                      .slider {
                          position: absolute;
                          cursor: pointer;
                          top: 0;
                          left: 0;
                          right: 0;
                          bottom: 0;
                          background-color: #ccc;
                          transition: .4s;
                      }
                  
                      .slider:before {
                          position: absolute;
                          content: "";
                          height: 13px;
                          width: 13px;
                          left: 4px;
                          bottom: 2px;
                          background-color: white;
                          transition: .4s;
                      }
                  
                      input:checked+.slider {
                          background-color: #0066cc;
                      }
                  
                      input:checked+.slider:before {
                          transform: translateX(13px);
                      }
                  
                      .slider.round {
                          border-radius: 34px;
                      }
                  
                      .slider.round:before {
                          border-radius: 50%;
                      }
                  </style>
                  
                  <script>
                  function detectOS() {
                    const userAgent = navigator.userAgent;
                    const platform = navigator.platform;

                    // Check for Windows
                    if (platform.indexOf('Win') !== -1 || userAgent.indexOf('Windows') !== -1) {
                        return 'Windows';
                    }

                    // Check for Mac (including macOS, Mac OS X, and older Mac OS)
                    if (platform.indexOf('Mac') !== -1 || userAgent.indexOf('Mac') !== -1) {
                        return 'Mac';
                    }

                    // Return null if neither Windows nor Mac is detected
                    return null;
                }

                // Alternative function that returns a boolean for each OS
                function getOSInfo() {
                    const userAgent = navigator.userAgent;
                    const platform = navigator.platform;

                    return {
                        isWindows: platform.indexOf('Win') !== -1 || userAgent.indexOf('Windows') !== -1,
                        isMac: platform.indexOf('Mac') !== -1 || userAgent.indexOf('Mac') !== -1,
                        detected: detectOS()
                    };
                }

                // Usage examples:
                console.log('OS detected:', detectOS()); // Returns 'Windows', 'Mac', or null
                console.log('OS info:', getOSInfo()); // Returns object with boolean flags

                // One-liner versions:
                const isWindows = () => navigator.platform.indexOf('Win') !== -1;
                const isMac = () => navigator.platform.indexOf('Mac') !== -1;

                      var autodestroy=true;

                      function handleToggle(checkbox) {
                          
                          autodestroy= checkbox.checked;

                          if (checkbox.checked) {
                              console.log('Toggle is ON');
                              
                              // Add your ON state logic here
                          } else {
                              console.log('Toggle is OFF');
                              // Add your OFF state logic here
                          }
                      }
                  </script>     
                   <a id="editmodels" href="#" class="signup-btn" style="background:#60d1b1;margin-right:15px;">Loading...</a><a href="https://aws.amazon.com/startups/credits" target="_blank" class="signup-btn" style="display:none">Apply for Activate credits</a></div>
            </div>
        </div>   

            <div class="container">
                <div class="main-column">
                  <!--  <h1 style="margin-bottom: var(--spacing)">LEAP
                 
                    </h1>
                    -->
                    <div id="prototype-list"></div>
                </div>
                
                <div class="side-column">
                    <!--<div class="card">
                        <h2>Welcome Guide</h2>
                        <div class="video-container">
                            <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                        </div>
                    </div>-->

                     <style>
                .accordion {
                width: 100%;
                border: 1px solid #ddd;
                border-radius: 4px;
              }

              .accordion-item {
                border-bottom: 1px solid #ddd;
              }

              .accordion-item:last-child {
                border-bottom: none;
              }

              .accordion-header {
                padding: 15px;
                background-color: #f4f4f4;
                cursor: pointer;
                user-select: none;
              }

              .accordion-header:hover {
                background-color: #ebebeb;
              }

              .accordion-content {
                padding: 0 15px;
                max-height: 0;
            
                overflow: hidden;
                transition: max-height 0.3s ease-out;
              }

              .accordion-item .video-container {
                  height:auto !important;
              }

              .accordion-item.active .accordion-content {
                max-height: 780px; /* Adjust this value based on your content */
                padding: 15px;
              }

              .accordion-header::after {
                content: '+';
                float: right;
                font-weight: bold;
              }

              .accordion-item.active .accordion-header::after {
                content: '-';
              }

              .video-container p {
              margin-top:15px
              }

              .card.active .hideon{
                  display:none !important;
                }

                .card .hideoff{
                  display:none;
                }

                .card.active .hideoff{
                  display:block;
                }


                details{
                      border-top:1px solid #e8eaed;margin-top:.75rem;padding-top:.75rem;
                    }
                    summary{
                      cursor:pointer;font-weight:600;
                      display:flex;align-items:center;gap:.4rem;
                    }
                    summary::after{
                      /*content:"▸";transition:transform .2s ease;*/
                    }
                    details[open] summary::after{transform:rotate(90deg)}

                    .todo-list {
                    list-style: none;
                    padding-top: 0px;
                    margin-top: 0px;
                    }

                    .todo-list li {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    font-size: 15px;
                    }
                    .todo-list details{
                    padding-top:0px !important;
                    margin-top:5px !important;
                    }
                    .download-q-ready-btn{margin-top:5px;position:relative;top:-2px;text-decoration:none;}
            </style>
           

            
            <div class="card">
                <div class="accordion">
                    <div class="accordion-item active">
                        <div class="accordion-header">Welcome Guide</div>
                        <div class="accordion-content">
                            
                            <div id="welcomevideo" class="video-container">
                                <!--<iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk"
                                    title="YouTube video player" frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>-->
                               <!-- <iframe width="315" height="560" src="https://www.youtube.com/embed/GjI4r0N9Xlw?autoplay=1" title="YouTube video player"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                allowfullscreen=""></iframe>
                                -->
                                
                              <!--<video width="315" height="560" controls autoplay muted>
                                  <source src="https://leapenv-websitebucket-vzdnmv5ky0j0.s3.amazonaws.com/assets/welcome-video.mp4" type="video/mp4">
                                  Your browser does not support the video tag.
                              </video>-->
                              <p>LEAP Stacks is loading...</p>
                            </div>
                            
                        </div>
                    </div>
                <!--
                    <div class="accordion-item">
                        <div class="accordion-header">API Gateway</div>
                        <div class="accordion-content">
                            <div class="video-container">
                                <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk"
                                    title="YouTube video player" frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                            <p>S3 is A full-stack RAG application that enables intelligent document interactions.</p>
                            <p><a href="#" style="margin-right:20px">Documentation</a><a href="#">Full video</a></p>
                        </div>
                        </div>
                    </div>
                
                    <div class="accordion-item">
                        <div class="accordion-header">Section 3</div>
                        <div class="accordion-content">
                            <p>Content for section 3 goes here. This can be any HTML content.</p>
                        </div>
                    </div>
                -->
                </div>

            <!--
                <h2>Welcome Guide</h2>
                <div class="video-container">
                    <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                </div>
            -->
            </div>
                    <!--
                    <div class="card cost-card" onclick="window.open('https://us-east-1.console.aws.amazon.com/billing/home?region=us-east-1#/freetier');" style="cursor:pointer !important;">
                        <h2>Explore Costs</h2>
                        <div class="total-cost" style="display:none">$127.84</div>
                        <p>Free Tier & Billing</p>
                    </div>
                    -->
                    <div style="display:none" id="output"></div>
                </div>
            </div>

            <div id="overlay" class="overlay">
              <div class="modal-popup">
                  <button class="close-modal" style="float:right;background:none;border:0;margin-left:15px;cursor:pointer;" >X</button>
                  <h2 id="modal-title">Alert</h2>
                  <div id="modal-message" style="max-height:500px;overflow:scroll"></div>
                  <div class="models-table">
                      <table>
                          <thead>
                              <tr>
                                  <th>Model Name</th>
                                  <th>Status</th>
                                  <th>Action</th>
                              </tr>
                          </thead>
                          <tbody id="models-list">
                          </tbody>
                      </table>
                  </div>
              </div>
          </div>

            
        <script>
                var appinfo = [];
                var models_access=[];
                var fulldata=null;
                var launching=false;
                var deleting=false;
                var statsInterval=null;

                var hasaccess=false;

                var prototypes = [
                    {
                        id: 1,
                        title: "Serverless API Backend",
                        description: "",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video1",
                        services: [],
                        estimatedCost: "$12/month"
                    },
                    {
                        id: 2,
                        title: "ML Model Training Pipeline",
                        description: "End-to-end pipeline for training and deploying machine learning models",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video2",
                        services: [],
                        estimatedCost: "$45/month"
                    },
                    {
                        id: 3,
                        title: "Real-time Analytics Dashboard",
                        description: "Interactive dashboard for processing and visualizing streaming data",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video3",
                        services: [],
                        estimatedCost: "$28/month"
                    }
                ];


                function showModalCustom(title, content) {

                    $('.models-table').hide();
                    $('.modal-popup').css('maxWidth','700px');
                    
                        const overlay = document.getElementById('overlay');
                        const modalTitle = document.getElementById('modal-title');
                        const modalMessage = document.getElementById('modal-message');
                        const modelsList = document.getElementById('models-list');

                        // Set title and message
                        modalTitle.textContent = title;
                        modalMessage.innerHTML = content;

                        // Clear existing models
                        //modelsList.innerHTML = content;

                        // Show the overlay
                        overlay.style.display = 'block';
                    }

                function showModal(title, message, models) {
                    $('.models-table').show();
                    $('.modal-popup').css('maxWidth', '600px');

                const overlay = document.getElementById('overlay');
                const modalTitle = document.getElementById('modal-title');
                const modalMessage = document.getElementById('modal-message');
                const modelsList = document.getElementById('models-list');

                // Set title and message
                modalTitle.innerHTML = title;
                modalMessage.textContent = message;

                // Clear existing models
                modelsList.innerHTML = '';

                // Add models to the table
                models.forEach(model => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>`+model.name+`</td>
                    <td class="`+(model.enabled ? 'status-enabled' : 'status-disabled')+`">
                        `+(model.enabled ? 'Enabled' : 'Not Enabled')+`
                    </td>
                    <td>
                    `+(!model.enabled ?
                                    `<a href="`+model.url+`" 
                                target="_blank" 
                                class="enable-button">Enable</a>` :
                                    '')+`
                    </td>
                `;
                            modelsList.appendChild(row);
                        });

                        // Show the overlay
                        overlay.style.display = 'block';
                    }

                    // Function to hide the modal
                    function hideModal() {
                        if (hasaccess)
                            document.getElementById('overlay').style.display = 'none';
                    }

                function GetServiceIcon(name)
                {
                    for (var i=0;i<fulldata['files'].length;i++)
                    {
                        if (fulldata['files'][i]['name']==name)
                        {
                            return fulldata['files'][i]['public_url'];
                        }
                    }

                    return "";
                }

                function renderPrototypes() {
                    const container = $('#prototype-list');
                    var pindex = 0;

                    var modstr=''
                    fulldata["models_access"].forEach(model => {
                     if (model.enabled)
                        modstr=modstr+'<option value="'+model.id+'">'+model.name+'</option>';
                     });

            modstr = '<select class="modelsel" style="display:block;margin-bottom:10px;background:white;border:1px solid #ccc;border-radius:8px;padding:5px;">'+modstr+'</select>';

                    prototypes.forEach(prototype => {
                        const servicesHtml = prototype.services.map((service, index) => 
                            '<div class="service-node" data-index="' + pindex + '" data-service="' + 
                            service.name.toLowerCase().replace(/ /g, '') + '">' +
                            '<img src="' + GetServiceIcon(service.name.toLowerCase().replace(/ /g, '')) + 
                            '" alt="' + service.name + '" class="service-icon">' +
                            '<div class="service-name">' + service.name + 
                            '<p class="service-desc">' + service.desc + '</p></div>' +
                            (index < prototype.services.length - 1 ? '<div class="service-arrow"></div>' : '') +
                            '</div>'
                        ).join('');

                        pindex++;

                        var desc = LinkExplainers(prototype.description);
                        var fulldesc = LinkExplainers(prototype.fulldescription);

                        const card = $(
                          '<div class="card prototype-card" data-id="' + prototype.id + '" data-stackname="' + prototype.stackname + '">' +
                          '<div class="status-msg"></div>' + 
                          '<div class="card-content"><div style="float:right" class="hideon">'+modstr+'<a href="#" data-id="' + prototype.id + '" class="launchbut" style="">Launch</a></div>' +
                          '<div style="float:right;" class="hideoff"><div class="deployment-status">' +
                          '<div class="status-dot"></div>' +
                          'Active' +
                          '<a href="#" data-id="' + prototype.id + '" class="deletebut" style="margin-left:10px;">Delete</a>' +
                          '</div></div>' +
                          '<div class="card-header">' +
                          '<img src="' + prototype.iconurl + '" alt="' + prototype.title + ' icon" class="card-icon">' +
                          '<div>' +
                          '<div class="card-title">' + prototype.title + '</div>' +
                          '<div class="estimated-cost hideon" style="font-size:13px"><i aria-hidden="true" class="fa fa-clock" style=""></i> ' + prototype.estimatedTimeString + '<span data-index="'+ pindex+'" class="costdetails" style="margin-left:10px;cursor:pointer;"><i aria-hidden="true" style="padding-right:5px" class="fa fa-circle-dollar-to-slot"></i>Cost: '+ prototype.estimatedCost+'</span></div>' +
                          '<div class="timerdiv hideoff"></div>' +
                          '</div>' +
                          '</div>' +
                          '<p class="hideon">' + desc + '</p>' +
                          '<div class="card-services hideon">' +
                          '<span class="service-tag" style="background:#f4f7ff;border:2px solid #e1e8ff;color:#e1e8ff !important;text-decoration:none;"><a style="color:#0044aa !important;text-decoration:none;" href="#" class="prototype-demo-video" data-index="'+pindex+'"><i class="fa fa-play" aria-hidden="true"></i> Play demo video</a></span>'+

                          prototype.services.map(service => 
                              '<span class="service-tag">' + LinkExplainers(service.name) + '</span>'
                          ).join('') +
                          '</div>' +
                          '</div>' +
                          '<div class="progress-bar">' +
                          '<div class="progress-fill"></div>' +
                          '</div>' +
                          '<div class="deployment-info">' +
                          '<div class="deployment-header">' +
                          '<h3></h3>' +
                          '</div>' +
                          '<div class="deployment-links"></div>' +
                          '<details><summary><i class="fa-solid fa-circle-info"></i> How It Works</summary > '+
                          '<div class="architecture-diagram">' +
                          '<div class="services-flow">' +
                          servicesHtml +
                          '</div>' +
                          '</div>' +
                          '<div class="prototype-description">' +
                          '<p>' + fulldesc + '</p>' +
                          '</div>' +
                          '</details>' +

                          '</div>' +

                          '<div class="stats-container hideoff" style="margin-top:20px;display:none">' +
                          '<details><summary><i class="fa-solid fa-chart-simple"></i> Usage Metrics</summary > ' +
                          '<small class="model_sel_name">Model: ' + prototype['model_name']+ '</small>' +
                          '<div class="stats-grid" style="display:grid;grid-template-columns:1fr 1fr 1fr 1fr;gap:20px;margin-top:10px;">' +
                          '<div class="stat-card" style="background:white;padding:15px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);">' +
                          '<h4>Messages</h4>' +
                          '<div class="stat-value message-count">0</div>' +
                          '</div>' +
                          '<div class="stat-card" style="background:white;padding:15px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);">' +
                          '<h4>Cost</h4>' +
                          '<div class="stat-value total-cost">$0.00</div>' +
                          '</div>' +
                          '<div class="stat-card" style="background:white;padding:15px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);">' +
                          '<h4>Avg. Cost / Message</h4>' +
                          '<div class="stat-value avg-cost">$0.00</div>' +
                          '</div>' +
                          '<div class="stat-card" style="background:white;padding:15px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);">' +
                          '<h4>Avg. Latency</h4>' +
                          '<div class="stat-value avg-latency">0ms</div>' +
                          '</div>' +
                          '<button class="refresh-stats-btn" data-id="' + prototype.id + '" style="margin-top:15px;padding:8px 15px;background:#0066cc;color:white;border:none;border-radius:4px;cursor:pointer;">Refresh Stats</button>' +

                          '</div>' +
                          '</details>' +

                          '</div>'
                      );
                        container.append(card);
                        card.find('.card-icon').on('error', function () {
                          //alert('error');
                          var img = $(this);
                          var src = img.attr('src');
                          expiredmedia(img,src)

                      });
                    });
                }

                var stackCode = '${StackCode}';     
                       
                const TRACKING_API = 'https://tjnx0im9yi.execute-api.eu-north-1.amazonaws.com/prod/track';

                function generateSessionId()
                {
                    return stackCode;
                }

                function trackEvent(eventType, prototypeId = null) {
                if (stackCode && stackCode.length > 0){
                    fetch(TRACKING_API, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            event_type: eventType,
                            prototype_id:prototypeId,
                            version: '1.0.0',
                            session_id: generateSessionId()
                        })
                    }).catch(() => { }); // Silent fail
                    }
                }

                trackEvent('install');

                function expiredmedia(img, src) {
                console.log('media expired error ' + src);

                // Check if it's a presigned URL (SigV2 or SigV4)
                const isSigV2 = src && (src.includes('Signature=') || src.includes('AWSAccessKeyId='));
                const isSigV4 = src && src.includes('X-Amz-Signature');

                if (isSigV2 || isSigV4) {
                    console.log('Detected presigned URL - attempting to regenerate');

                    // Extract S3 key from the URL
                    const match = src.match(/amazonaws\.com\/([^?]+)/);
                    if (match) {
                        const key = decodeURIComponent(match[1]); // Decode URL-encoded characters

                        console.log('Extracted S3 key:', key);

                        // Call API to regenerate
                        $.ajax({
                            url: 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/regenerate-urls',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ keys: [key] }),
                            success: function (response) {
                                console.log('Regeneration response:', response);
                                if (response.urls && response.urls[key]) {
                                    console.log('Successfully regenerated URL');
                                    img.attr('src', response.urls[key]);
                                    newUrl = response.urls[key];
                                    updateStoredUrl(key, newUrl);
                                } else {
                                    console.error('No URL in response for key:', key);
                                    //showPlaceholder(img);
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Failed to regenerate URL:', error);
                                console.error('Response:', xhr.responseText);
                              // showPlaceholder(img);
                            }
                        });
                    } else {
                        console.error('Could not extract S3 key from URL');
                        //showPlaceholder(img);
                    }
                } else {
                    console.log('Not a presigned URL, showing placeholder');
                    //showPlaceholder(img);
                }
            }

            function updateStoredUrl(s3Key, newUrl) {
            console.log('Updating stored metadata for:', s3Key);

            // Update in prototypes array
            prototypes.forEach(prototype => {
                // Check if this is the icon URL
                if (prototype.iconurl && prototype.iconurl.includes(s3Key)) {
                    console.log('Updating iconurl for prototype:', prototype.id);
                    prototype.iconurl = newUrl;
                }

                // Check if this is the video URL
                if (prototype.videoUrl && prototype.videoUrl.includes(s3Key)) {
                    console.log('Updating videoUrl for prototype:', prototype.id);
                    prototype.videoUrl = newUrl;
                }

                // Check service icons
                if (prototype.services) {
                    prototype.services.forEach(service => {
                        if (service.iconUrl && service.iconUrl.includes(s3Key)) {
                            console.log('Updating service icon for:', service.name);
                            service.iconUrl = newUrl;
                        }
                    });
                }
            });

            // Update in fulldata if it exists
            if (typeof fulldata !== 'undefined' && fulldata.prototypes) {
                fulldata.prototypes.forEach(prototype => {
                    if (prototype.iconurl && prototype.iconurl.includes(s3Key)) {
                        prototype.iconurl = newUrl;
                    }
                    if (prototype.videoUrl && prototype.videoUrl.includes(s3Key)) {
                        prototype.videoUrl = newUrl;
                    }
                });
            }

            // Update in fulldata files array for service icons
            if (typeof fulldata !== 'undefined' && fulldata.files) {
                fulldata.files.forEach(file => {
                    if (file.public_url && file.public_url.includes(s3Key)) {
                        console.log('Updating file URL for:', file.name);
                        file.public_url = newUrl;
                    }
                });
            }

            saveToLocalStorage('myAppState', fulldata);

            console.log('Metadata update complete');
        }

                async function fetchGithubRepoData() {

                    try {
                    const response = await fetch('https://${GetGithubRepoApi}.execute-api.${AWS::Region}.amazonaws.com/default/default', {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Origin': window.location.origin
                            },
                            mode: 'cors'
                        });

                        if (!response.ok) {
                            throw new Error('HTTP error! status: ' + response.status);
                        }

                        const data = await response.json();
                        console.log('Raw API Response:', data);

                         var oldp = null;

                        if (!fulldata)
                            prototypes = data['prototypes'];
                        else
                            oldp = prototypes;


                        appinfo = data["appinfo"];
                        models_access = data["models_access"];
                        fulldata = data;

                        setCookie('leap_data_timestamp', Date.now().toString(), 30);

                        if (oldp) {
                            fulldata['prototypes'] = oldp;
                            $('.refreshmodels').html('Refresh');
                        }

                        var tote=0;

                        for (const model of models_access) {
                            if (model.enabled)
                            {
                                tote=tote+1;
                                hasaccess=true;
                            }
                        }   

                        if (oldp)
                        {
                            hideModal();
                            showModal("Model Access <button class='refreshmodels' style='float:right'>Refresh</button>", "You need to have access to at least one model to continue.", models_access);
                        }
                        else
                        if (!hasaccess)
                        showModal("Model Access <button class='refreshmodels' style='float:right'>Refresh</button>", "You need to have access to at least one model to continue.", models_access);

                        $('#editmodels').html(tote+' models enabled');

                        $('#welcomevideo').html('<video width="315" height="560" controls><source id="" src="'+ GetServiceIcon('welcomesmall3')+'" type="video/mp4" >Your browser does not support the video tag.</video ><p>Welcome to LEAP! Watch the video above for a quick intro or launch one of the prototypes to the left. All resources will be created for you with guides on how to customize each. Click on any highlighted term to learn about it.</p>');

                        if (!oldp)
                            renderPrototypes();

                        if (hasaccess)
                            saveToLocalStorage('myAppState', data);

                    if (hasaccess && (!launching))
                        window.location.reload();  

                        return data.body;

                    } catch (error) {
                        console.error('Error fetching repository data:', error);
                        alert('Error fetching repository data: ' + error.message);
                    }
                }

                async function deployPrototypeTemplate(id) {
                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/initiate';

                    const tkey = 'protoscripts/' + id + '/template.yaml';

                    var replacements = [];

                    if ($(".prototype-card[data-id='"+id+"']").find('.modelsel option:selected').length)
                     replacements.push({Target:'amazon.nova-pro-v1:0',Replacement:$(".prototype-card[data-id='"+id+"']").find('.modelsel').val()});
                    else
                    {
                        alert('You must select an LLM to launch');
                        return;
                    }

                    var prot = {};
                    var mid= $(".prototype-card[data-id='" + id + "']").find('.modelsel').val();
                    var mname = $(".prototype-card[data-id='" + id + "']").find('.modelsel option:selected').text(); 
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == id) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  break;
                                              }
                    
                    ShowPrototypeVideo(pindex);

                    trackEvent('prototype_deployed',id);

                    //$(".prototype-card[data-id='"+id+"']").find('.modelsel option:selected').length > 0 ? $(".prototype-card[data-id='"+id+"']").find('.modelsel') : null
                  
                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ templateKey: tkey, templateBucket: appinfo['bucket'], replacements: replacements }),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                            output.innerHTML = 'Stack creation initiated. Stack ID: ' + initiateData.stackId;
                            
                            $(".prototype-card[data-id='"+id+"']").attr('data-stackname',initiateData.stackName);

                            
                            prototypes[pindex]['stackname']=initiateData.stackName;
                            prototypes[pindex]['model_id'] = mid;
                            prototypes[pindex]['model_name'] = mname;

                            fulldata['prototypes'] = prototypes;
                            saveToLocalStorage('myAppState', fulldata);


                            checkStatus(initiateData.stackName, id);
                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                async function selfdestructStack(stackName,id) {
                const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/self-destruct';

                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ stackName: stackName}),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                          output.innerHTML = 'Stack auto-destroyed';
                                             
                          // checkStatus(stackName, id);

                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                 function startCountdownTimer(pid, starttime = null)    
                 {                // Set 2 hour countdown
                    let countDownDate = starttime ? starttime : new Date().getTime() + (2 * 60 * 60 * 1000);
                    
                    // Create timer element
                    let timerElement = document.createElement('div');
                    timerElement.className = 'countdown-timer';
                    //timerElement.style.float = 'right';
                    timerElement.style.fontSize = '14px';
                    timerElement.style.color = 'black';
                    
                    // Add timer to card header
                    $('.prototype-card[data-id="'+pid+'"] .timerdiv').html(timerElement);
                    
                    // Update timer every second
                    let timer = setInterval(function() {
                        let now = new Date().getTime();
                        let distance = countDownDate - now;
                        
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        
                        timerElement.innerHTML = 'Auto-deletes in: '+hours+'h '+minutes+'m '+seconds+'s';
                        
                        // When countdown finishes
                        if (distance < 0) {
                            clearInterval(timer);
                            timerElement.innerHTML = "Initiating auto-delete...";
                            // Get stack name from prototype card
                            let stackName = $('.prototype-card[data-id="'+pid+'"]').attr('data-stackname');
                            // Call self destruct
                            deleteStack(stackName, pid);
                        }
                    }, 1000);
                }      

                async function deleteStack(stackName,id) {
                          
                     $('.prototype-card[data-id="' + id + '"]').find('.status-msg').html('Deleting...');
                    $('.prototype-card[data-id="' + id + '"]').find('.deployment-info').hide();
                    $('.prototype-card[data-id="' + id + '"]').find('.card-content').hide();
                    $('.prototype-card[data-id="' + id + '"]').find('.stats-container').hide();

                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/delete-stack';

                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ stackName: stackName}),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                            output.innerHTML = 'Stack deletion initiated';

                           checkStatus(stackName, id);

                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                async function checkStatus(stackName, pid) {
                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/check-status';

                    try {
                        while (true) {
                            const statusResponse = await fetch(apiUrl, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ stackName: stackName }),
                            });
                            const statusData = await statusResponse.json();
                            if (statusResponse.ok) {
                                output.innerHTML += '<br>Status: ' + statusData.status;
                                if (statusData.status.endsWith('_COMPLETE') || statusData.status.endsWith('_FAILED') || statusData.status.includes('does not exist')) {
                                    if (statusData.error) {
                                        output.innerHTML += '<br>Error: ' + statusData.error;
                                    }

                                     launching=false;
                                     deleting=false;

                                          var prot = {};
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == pid) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  prototypes[i]['outputs'] = statusData.outputs;
                                                  break;
                                              }


                                    if (!statusData.status.includes('DELETE'))
                                    {
                                      if (statusData.outputs) {
                                          
                                          var outputs = statusData.outputs;
                                          for (var key in outputs) {
                                              if (outputs.hasOwnProperty(key)) {
                                                  console.log('Output: ' + key + ' = ' + outputs[key]);

                                                  if (key == "FrontendURL")
                                                      prototypes[i]['frontend'] = outputs[key];
                                                  else if (key == "BackendURL")
                                                      prototypes[i]['backend'] = outputs[key];
                                              }
                                          }
                                      }

                                      $('.prototype-card[data-id="' + pid + '"]').find('.status-msg').html('');
                                      PrototypeDeployed(pid, pindex);
                                      saveToLocalStorage('myAppState', fulldata);

                                      if (autodestroy)
                                      {
                                      selfdestructStack(stackName,pid);
                                      startCountdownTimer(pid);
                                      }

                                    }
                                    else
                                    {
                                      $('.prototype-card[data-id="' + pid + '"]').find('.status-msg').html('');
                                       PrototypeDeleted(pid, pindex);
                                       saveToLocalStorage('myAppState', fulldata);
                                    }

                                    break;
                                }
                            } else {
                                throw new Error(statusData.error || 'Unknown error occurred');
                            }
                            await new Promise(resolve => setTimeout(resolve, 5000));
                        }
                    } catch (error) {
                        output.innerHTML += '<br>Error checking status: ' + error.message;

                        if (error.message.includes('does not exist'))
                        {
                          var prot = {};
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == pid) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  break;
                                              }

                           console.log('deleted');
                           $('.prototype-card[data-id="' + pid + '"]').find('.status-msg').html('');
                           PrototypeDeleted(pid, pindex);
                           $('.prototype-card[data-id="' + pid + '"]').find('.status-msg').html('');
                           saveToLocalStorage('myAppState', fulldata);
                        }
                    }
                }

                function trackStats()
                {
                    // Auto-refresh stats every 30 seconds for active prototypes
                    statsInterval = setInterval(() => {
                        prototypes.forEach(prototype => {
                            if (prototype.active) {
                                fetchStats(prototype.id);
                            }
                        });
                    }, 8000);
                }

                // function to fetch and display stats
                function fetchStats(prototypeId) {
                    const card = $('.prototype-card[data-id="' + prototypeId + '"]');
                    const dynamoTableName = prototypes.find(p => p.id === prototypeId).outputs?.DynamoDBTableName;
                    
                    if (!dynamoTableName) {
                        console.error('DynamoDB table name not found for prototype: ' + prototypeId);
                        return;
                    }
                    
                    fetch('https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/get-stats', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            tableName: dynamoTableName
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Update stat values
                        card.find('.message-count').text(data.message_count);
                        card.find('.total-cost').text('$' + data.total_cost_usd.toFixed(4));
                        card.find('.avg-cost').text('$' + data.average_cost_per_message.toFixed(4));
                        card.find('.avg-latency').text(Math.round(data.average_latency_ms) + 'ms');
                        /*
                        // Create or update token chart
                        const chartCanvas = document.getElementById('token-chart-' + prototypeId);
                        const chartContext = chartCanvas.getContext('2d');
                        
                        // Destroy existing chart if it exists
                        if (window.tokenCharts && window.tokenCharts[prototypeId]) {
                            window.tokenCharts[prototypeId].destroy();
                        }
                        
                        if (!window.tokenCharts) {
                            window.tokenCharts = {};
                        }
                        
                        
                        // Create new chart
                        window.tokenCharts[prototypeId] = new Chart(chartContext, {
                            type: 'doughnut',
                            data: {
                                labels: ['Input Tokens', 'Output Tokens'],
                                datasets: [{
                                    data: [data.total_input_tokens, data.total_output_tokens],
                                    backgroundColor: ['#6c757d', '#0066cc']
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    title: {
                                        display: true,
                                        text: 'Token Usage Distribution'
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                const label = context.label || '';
                                                const value = context.raw || 0;
                                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                                const percentage = Math.round((value / total) * 100);
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        */

                    })
                    .catch(error => {
                        console.error('Error fetching stats:', error);
                    });
                }

                function PrototypeDeployed(id, index) {
                    const card = $(`.prototype-card[data-id="` + id + `"]`);
                    const progressBar = card.find('.progress-bar');
                    const architectureDiagram = card.find('.architecture-diagram');
                    const dlinks = card.find('.deployment-links');
                    const deploymentInfo = card.find('.deployment-info');
                    const cardContent = card.find('.card-content');
                    const statscontainer = card.find('.stats-container');
                    cardContent.fadeIn();
                    statscontainer.fadeIn();
                    $(card).addClass('active');

                    prototypes[index]['active']=true;

                    if (!prototypes[index]['deletetimer'])
                      prototypes[index]['deletetimer']= new Date().getTime() + (2 * 60 * 60 * 1000);

                    fulldata['prototypes'] = prototypes;

                    //$(dlinks).html('<p<label style="font-weight:bold;margin-right:5px;overflow: hidden;display: inline-block;">Frontend:</label><a target="_blank" class="truncated-link" href="' + prototypes[index]['frontend'] + '">' + prototypes[index]['frontend'] + '</a><br><label style="font-weight:bold;margin-right:5px;overflow: hidden;display: inline-block;">Backend:</label><a target="_blank"  class="truncated-link"  href="' + prototypes[index]['backend'] + '">' + prototypes[index]['backend'] + '</a></p>');
                    $(dlinks).html('<p><label style="font-weight:bold;margin-right:5px;overflow: hidden;display: inline-block;"><i class="fa-solid fa-globe"></i> Frontend:</label><a target="_blank" class="truncated-link" href="' + prototypes[index]['frontend'] + '">' + prototypes[index]['frontend'] + '</a><!--<br><label style="font-weight:bold;margin-right:5px;overflow: hidden;display: inline-block;">Backend:</label><a target="_blank"  class="truncated-link"  href="' + prototypes[index]['backend'] + '">' + prototypes[index]['backend'] + '</a>--></p>');

                    if (prototypes[index]['custom_outputs'] && prototypes[index]['custom_outputs'].length)
                    {
                      for (var c=0;c<prototypes[index]['custom_outputs'].length;c++)
                      {
                        var kid = prototypes[index]['custom_outputs'][c]['id'];
                        if (prototypes[index]['outputs'].hasOwnProperty(kid))
                          $(dlinks).append('<p><a target="_blank" class="special-btn" href="' + prototypes[index]['outputs'][kid] + '">' +prototypes[index]['custom_outputs'][c]['title'] + '</a></p>');
                      }
                    }

                    card.find('.model_sel_name').html('Model: '+prototypes[index]['model_name']);
                    

                    progressBar.fadeOut(() => {
                        deploymentInfo.fadeIn();
                        architectureDiagram.fadeIn();
                    });

                    if (!statsInterval)
                      trackStats();

                    // Add Q Developer script download buttons
                const qDeveloperButtons = $('<details class="q-developer-buttons-det" data-id="' + id + '" data-stack="' + prototypes[index]['stackname'] + '"><summary><i class="fa-solid fa-arrow-right"></i> Next Steps</summary ><div class="q-developer-buttons" style="margin-top:15px;">' +
                '<!--<h4>🤖 Amazon Q Developer CLI</h4>' +
                '<button class="download-q-script-btn" ' +
                'data-id="' + id + '" ' +
                'data-stack="' + prototypes[index]['stackname'] + '" ' +
                'style="margin-right:10px;padding:8px 15px;background:#FF9900;color:white;border:none;border-radius:4px;">' +
                '📥 Download Setup Script' +
                '</button>-->' +
                prototypes[index]['nextStepsHTML']+
                '<!--<button class="download-q-ready-btn" ' +
                'data-id="' + id + '" ' +
                'data-stack="' + prototypes[index]['stackname'] + '" ' +
                'style="padding:8px 15px;background:#28a745;color:white;border:none;border-radius:4px;">' +
                '📥 Edit with Amazon Q CLI' +
                '</button>-->' +
                '<div style="margin-top:8px;font-size:0.9em;color:#666;display:none">' +
                '<strong>Ready Script:</strong>Pre-configured with your stack details, installs Amazon Q CLI if unavailable' +
                '</div>' +
                '</div></details>');

                $(card).find('.q-developer-buttons-det').remove();

                card.find('.deployment-info').append(qDeveloperButtons);

                   
                }

                function downloadPrefilledQDeveloperScript(prototypeId, stackName) {
                const prototype = prototypes.find(p => p.id === prototypeId);
                const applicationName = prototype?.applicationName || 'LEAP-Prototypes';

                var region = 'us-east-1';

                if (detectOS() === 'Windows') 
                {
               
                        // Show Windows-specific alert with WSL instructions
                        const windowsInstructions = '<div style="font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; padding: 20px;">' +
                            '<div style="text-align: center; margin-bottom: 20px;">' +
                            '<h2 style="color: #0073bb; margin: 0; font-size: 24px;">🪟 Windows Setup Required for Amazon Q CLI</h2>' +
                            '<p style="color: #666; margin: 10px 0 0 0;">Amazon Q CLI requires a Unix-like environment. Please follow these steps:</p>' +
                            '</div>' +

                            '<div style="background: #f8f9fa; border-left: 4px solid #0073bb; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                            '<h3 style="color: #0073bb; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 1: Install WSL (Windows Subsystem for Linux)</h3>' +
                            '<ol style="margin: 0; padding-left: 20px;">' +
                            '<li>Open PowerShell as Administrator</li>' +
                            '<li>Run: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">wsl --install</code></li>' +
                            '<li>Restart your computer when prompted</li>' +
                            '<li>Set up Ubuntu username/password after restart</li>' +
                            '</ol>' +
                            '</div>' +

                            '<div style="background: #f8f9fa; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                            '<h3 style="color: #28a745; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 2: Install Amazon Q CLI in WSL</h3>' +
                            '<ol style="margin: 0; padding-left: 20px;">' +
                            '<li>Open Ubuntu from Start Menu</li>' +
                            '<li>Update packages: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">sudo apt update && sudo apt upgrade -y</code></li>' +
                            '<li>Install dependencies: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">sudo apt install build-essential curl wget unzip -y</code></li>' +
                            '<li>Download Q CLI: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">curl --proto \'=https\' --tlsv1.2 -sSf "https://desktop-release.q.us-east-1.amazonaws.com/latest/q-x86_64-linux.zip" -o "q.zip"</code></li>' +
                            '<li>Extract and install: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">unzip q.zip && ./q/install.sh</code></li>' +
                            '<li>Restart terminal or run: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">source ~/.bashrc</code></li>' +
                            '</ol>' +
                            '</div>' +

                            '<div style="background: #f8f9fa; border-left: 4px solid #17a2b8; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                            '<h3 style="color: #17a2b8; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 3: Authenticate Amazon Q</h3>' +
                            '<ol style="margin: 0; padding-left: 20px;">' +
                            '<li>Run: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q login</code></li>' +
                            '<li>Follow prompts to authenticate with AWS Builder ID (free) or IAM Identity Center</li>' +
                            '<li>Verify installation: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q --version</code></li>' +
                            '<li>Check diagnostics: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q doctor</code></li>' +
                            '</ol>' +
                            '</div>' +

                            '<div style="background: #f8f9fa; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                            '<h3 style="color: #856404; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 4: Connect to Your Prototype</h3>' +
                            '<p style="margin: 0 0 10px 0;">After authentication, run this in Ubuntu terminal:</p>' +
                            '<div style="background: #2d3748; color: #e2e8f0; padding: 15px; border-radius: 6px; font-family: \'Courier New\', monospace; font-size: 14px; overflow-x: auto;">' +
                            '# Set your stack information<br>' +
                            'export STACK_NAME="' + stackName + '"<br>' +
                            'export AWS_REGION="' + region + '"<br>' +
                            'export APP_NAME="' + applicationName + '"<br><br>' +
                            '# Query Amazon Q about your CloudFormation stack<br>' +
                            'q chat "I have CloudFormation stack \'$STACK_NAME\' in region \'$AWS_REGION\' within Application \'$APP_NAME\'. This is a serverless prototype deployed through LEAP. Please help me analyze the resources and identify the relevant frontend and backend components for modification."' +
                            '</div>' +
                            '</div>' +

                        

                            '<div style="background: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; margin: 20px 0; border-radius: 6px; text-align: center;">' +
                            '<p style="margin: 0; color: #0066cc;">' +
                            '💡 <strong>Need help?</strong> Visit: ' +
                            '<a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html" ' +
                            'target="_blank" ' +
                            'style="color: #0066cc; text-decoration: none;">' +
                            'Amazon Q CLI Documentation' +
                            '</a>' +
                            '</p>' +
                            '</div>' +
                            '</div>';

                        showModalCustom('Amazon Q CLI on Windows', windowsInstructions);

                        return;
                    }
                
                // Create script with pre-filled values using string concatenation
                const scriptContent = '#!/bin/bash\n' +
                    '# Mac setup for Amazon Q Developer CLI - Pre-configured for ' + stackName + '\n' +
                    'echo "🚀 Setting up Amazon Q Developer CLI for ' + stackName + '..."\n' +
                    '\n' +
                    '# Check if Q CLI is already installed\n' +
                    'if command -v q &> /dev/null; then\n' +
                    '    echo "✅ Amazon Q CLI already installed"\n' +
                    '    echo "Version: $(q --version)"\n' +
                    'else\n' +
                    '    echo "📦 Installing Amazon Q CLI..."\n' +
                    '    \n' +
                    '    # Check if Amazon Q app is already installed\n' +
                    '    if [ -d "/Applications/Amazon Q.app" ]; then\n' +
                    '        echo "✅ Amazon Q app found but CLI not in PATH"\n' +
                    '        echo "Please open Amazon Q app from Applications to complete setup"\n' +
                    '        open "/Applications/Amazon Q.app"\n' +
                    '        exit 1\n' +
                    '    fi\n' +
                    '    \n' +
                    '    # Download and install Amazon Q\n' +
                    '    echo "📥 Downloading Amazon Q..."\n' +
                    '    curl -L "https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg" -o ~/Downloads/AmazonQ.dmg\n' +
                    '    \n' +
                    '    echo "📦 Installing Amazon Q..."\n' +
                    '    hdiutil attach ~/Downloads/AmazonQ.dmg -nobrowse -quiet\n' +
                    '    cp -R "/Volumes/Amazon Q/Amazon Q.app" /Applications/\n' +
                    '    hdiutil detach "/Volumes/Amazon Q" -quiet\n' +
                    '    rm ~/Downloads/AmazonQ.dmg\n' +
                    '    \n' +
                    '    echo "🚀 Launching Amazon Q for initial setup..."\n' +
                    '    open "/Applications/Amazon Q.app"\n' +
                    '    \n' +
                    '    echo ""\n' +
                    '    echo "⏳ Please complete the Amazon Q app setup, then run this script again."\n' +
                    '    echo "The CLI command \'q\' will be available after the app setup is complete."\n' +
                    '    exit 0\n' +
                    'fi\n' +
                    '\n' +
                    '# Check if user is authenticated\n' +
                    'if ! q doctor &> /dev/null; then\n' +
                    '    echo "🔐 Authentication required. Running q login..."\n' +
                    '    q login\n' +
                    '    echo "✅ Authentication complete"\n' +
                    'else\n' +
                    '    echo "✅ Already authenticated"\n' +
                    'fi\n' +
                    '\n' +
                    '# Pre-configured stack information\n' +
                    'STACK_NAME="' + stackName + '"\n' +
                    'AWS_REGION="' + region + '"\n' +
                    'APP_NAME="' + applicationName + '"\n' +
                    '\n' +
                    '# Set environment variables\n' +
                    'export AWS_STACK_NAME="$STACK_NAME"\n' +
                    'export AWS_REGION="$AWS_REGION"\n' +
                    'export AWS_DEFAULT_REGION="$AWS_REGION"\n' +
                    '\n' +
                    'echo ""\n' +
                    'echo "📋 Using pre-configured stack information:"\n' +
                    'echo "Stack Name: $STACK_NAME"\n' +
                    'echo "Region: $AWS_REGION"\n' +
                    'echo "Application: $APP_NAME"\n' +
                    '\n' +
                    '# Create context message\n' +
                    'CONTEXT="I have CloudFormation stack \'$STACK_NAME\' in region \'$AWS_REGION\' within Application \'$APP_NAME\'. This is a serverless prototype deployed through LEAP. Please help me analyze the resources and identify the relevant frontend and backend components for modification."\n' +
                    '\n' +
                    'echo ""\n' +
                    'echo "🤖 Connecting to your LEAP prototype..."\n' +
                    'echo ""\n' +
                    '\n' +
                    '# Start Q CLI with the context\n' +
                    'q chat "$CONTEXT"\n' +
                    '\n' +
                    'echo ""\n' +
                    'echo "✅ Connected to LEAP prototype: $STACK_NAME"\n' +
                    'echo "💡 You can now ask questions about your stack. Type \'exit\' to quit."\n' +
                    'echo "💡 To see this context again, type: q chat --resume"';

                // Create and download the file
                const blob = new Blob([scriptContent], { type: 'text/plain' });
                const url = window.URL.createObjectURL(blob);

                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = 'q-developer-' + stackName + '-ready.sh';
                downloadLink.style.display = 'none';

                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);

                window.URL.revokeObjectURL(url);

                const macInstructions = '<div style="font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; padding: 20px;">' +
                '<div style="text-align: center; margin-bottom: 20px;">' +
                    '<h2 style="color: #0073bb; margin: 0; font-size: 24px;">🍎 Mac Setup for Amazon Q CLI</h2>' +
                    '<p style="color: #666; margin: 10px 0 0 0;">Amazon Q CLI runs natively on macOS. Please follow these steps:</p>' +
                '</div>' +

                '<div style="background: #f8f9fa; border-left: 4px solid #0073bb; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                    '<h3 style="color: #0073bb; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 1: Check Prerequisites</h3>' +
                    '<ol style="margin: 0; padding-left: 20px;">' +
                        '<li>Ensure macOS 10.15 (Catalina) or later</li>' +
                        '<li>Open Terminal app (found in Applications > Utilities)</li>' +
                        '<li>Verify architecture: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">uname -m</code> (should show x86_64 or arm64)</li>' +
                    '</ol>' +
                '</div>' +

                '<div style="background: #f8f9fa; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                    '<h3 style="color: #28a745; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 2: Install Amazon Q CLI</h3>' +
                    '<p style="margin: 0 0 10px 0;"><strong>For Apple Silicon (M1/M2/M3) Macs:</strong></p>' +
                    '<ol style="margin: 0 0 15px 0; padding-left: 20px;">' +
                        '<li>Download: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">curl -L "https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg" -o AmazonQ.dmg</code></li>' +
                    '</ol>' +
                    '<p style="margin: 0 0 10px 0;"><strong>For Intel Macs:</strong></p>' +
                    '<ol style="margin: 0 0 15px 0; padding-left: 20px;">' +
                        '<li>Download: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">curl -L "https://desktop-release.q.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg" -o AmazonQ.dmg</code></li>' +
                    '</ol>' +
                    '<p style="margin: 0 0 10px 0;"><strong>Then for both architectures:</strong></p>' +
                    '<ol start="2" style="margin: 0; padding-left: 20px;">' +
                        '<li>Mount the DMG: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">hdiutil attach AmazonQ.dmg</code></li>' +
                        '<li>Copy to Applications: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">cp -R "/Volumes/Amazon Q/Amazon Q.app" /Applications/</code></li>' +
                        '<li>Unmount DMG: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">hdiutil detach "/Volumes/Amazon Q"</code></li>' +
                        '<li>Open Amazon Q app from Applications folder to complete setup</li>' +
                        '<li>The CLI tool \'q\' will be automatically available in Terminal after app setup</li>' +
                    '</ol>' +
                '</div>' +

                '<div style="background: #f8f9fa; border-left: 4px solid #17a2b8; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                    '<h3 style="color: #17a2b8; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 3: Authenticate Amazon Q</h3>' +
                    '<ol style="margin: 0; padding-left: 20px;">' +
                        '<li>Run: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q login</code></li>' +
                        '<li>Follow prompts to authenticate with AWS Builder ID (free) or IAM Identity Center</li>' +
                        '<li>Verify installation: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q --version</code></li>' +
                        '<li>Check diagnostics: <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; font-family: \'Courier New\', monospace;">q doctor</code></li>' +
                    '</ol>' +
                '</div>' +

                '<div style="background: #f8f9fa; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 4px;">' +
                    '<h3 style="color: #856404; margin: 0 0 10px 0; font-size: 18px;">📋 STEP 4: Connect to Your Prototype</h3>' +
                    '<p style="margin: 0 0 10px 0;">After authentication, run this in Terminal:</p>' +
                    '<div style="background: #2d3748; color: #e2e8f0; padding: 15px; border-radius: 6px; font-family: \'Courier New\', monospace; font-size: 14px; overflow-x: auto;">' +
                        '# Set your stack information<br>' +
                        'export STACK_NAME="' + stackName + '"<br>' +
                        'export AWS_REGION="' + region + '"<br>' +
                        'export APP_NAME="' + applicationName + '"<br><br>' +
                        '# Query Amazon Q about your CloudFormation stack<br>' +
                        'q chat "I have CloudFormation stack \'$STACK_NAME\' in region \'$AWS_REGION\' within Application \'$APP_NAME\'. This is a serverless prototype deployed through LEAP. Please help me analyze the resources and identify the relevant frontend and backend components for modification."' +
                    '</div>' +
                '</div>' +

                '<div style="background: #e7f5ff; border: 1px solid #c3e6fc; padding: 15px; margin: 20px 0; border-radius: 6px;">' +
                    '<p style="margin: 0; color: #004085;">' +
                        '💡 <strong>Mac Tips:</strong> If you see a security warning when opening Amazon Q, go to System Settings > Privacy & Security and click "Open Anyway" for Amazon Q.' +
                    '</p>' +
                '</div>' +

                '<div style="background: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; margin: 20px 0; border-radius: 6px; text-align: center;">' +
                    '<p style="margin: 0; color: #0066cc;">' +
                        '💡 <strong>Need help?</strong> Visit: ' +
                        '<a href="https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html" ' +
                        'target="_blank" ' +
                        'style="color: #0066cc; text-decoration: none;">' +
                            'Amazon Q CLI Documentation' +
                        '</a>' +
                    '</p>' +
                '</div>' +
            '</div>';

            showModalCustom('Connect to Amazon Q CLI on Mac', macInstructions);

                /*alert('✅ Ready-to-run Q Developer script downloaded!\n\nTo use:\n1. Open Terminal\n2. Navigate to Downloads\n3. Run: chmod +x q-developer-' + stackName + '-ready.sh\n4. Run: ./q-developer-' + stackName + '-ready.sh\n\n🚀 No configuration needed - everything is pre-filled!');
                */
            }

                function PrototypeDeleted(id, index) {
                    const card = $(`.prototype-card[data-id="` + id + `"]`);
                    const progressBar = card.find('.progress-bar');
                    const architectureDiagram = card.find('.architecture-diagram');
                    const dlinks = card.find('.deployment-links');
                    const deploymentInfo = card.find('.deployment-info');
                    const cardContent = card.find('.card-content');

                    const statusMsg = card.find('.status-msg');
       
                    // Clear the status message
                    statusMsg.html('');

                    prototypes[index]['active']=false;
                    deleting=false;
                    prototypes[index]['deletetimer']=null;
                    prototypes[index]['stackname'] = "";
                    fulldata['prototypes'] = prototypes;

                    saveToLocalStorage('myAppState', fulldata);


                    cardContent.fadeIn();
                    card.removeClass('active');
                    cardContent.removeClass('active');

                    card.removeClass('expanded');


                    deploymentInfo.fadeOut();
                    architectureDiagram.fadeOut();

                    if ((!activecount) && statsInterval)
                    {
                        clearInterval(statsInterval);
                        statsInterval=null;
                    }
                    
                }

                 function GetServiceID(pid,service)
                {
                        var outputs = prototypes[pid]['outputs'];

                        //alert(pid+' '+JSON.stringify(outputs));

                        
                        for (var key in outputs) {
                            if (outputs.hasOwnProperty(key)) {
                                console.log('GetServiceID Output: ' + key + ' = ' + outputs[key]);

                                if ((service=="s3") && (key == "S3BucketName")) {
                                    return outputs[key];
                                }
                                else  if ((service == "lambda") && (key == "LambdaFunctionName")) {
                                    return outputs[key];
                                }
                                else if ((service == "apigateway") && (key == "ApiEndpoint")) {
                                    return outputs[key];
                                }
                            }
                        }

                        return "";
                }

                
                function LinkExplainers(words)
                {
                    var explainers = appinfo["explainers"];
                    console.log(appinfo);
                    explainers.forEach(function (explainer,index) {
                        var term = explainer.term;
                        var escapedTerm = term.replace(/[.*+?^{}$()|[\]\\]/g, '\\$&'); // Escape special characters
                        var regex = new RegExp('\\b' + escapedTerm + '\\b', 'gi');

                        words = words.replace(regex, function (match) {
                            return '<a href="#" class="explainer-link" data-index="' + index + '" data-explainer-id="' + explainer.name + '">' + match + '</a>';
                        });
                    });

                    return words;

                }

                function ShowExplainer(index)
                {
                // Stop all HTML5 videos on the page first
                document.querySelectorAll('video').forEach(video => {
                    video.pause();
                });            

                      var explainers = appinfo.explainers;
                      var item = explainers[index];

                      if ($(".accordion-item[data-eid='" + index + "']").length)
                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      else
                      {
                        var doclinks = item['links'].length ? '<a target="_blank" href="'+item['links'][0]+'" style="margin-right:20px">Documentation</a>' : '';
                          
                          if (item['videoURL'] && item['videoURL'].toLowerCase().includes('http')) 
                            $('.accordion').append('<div class="accordion-item" data-eid="' + index + '"> <div class="accordion-header">' + item['name'] + '</div> <div class="accordion-content"> <div class="video-container"> <iframe width="360" height="215" src="' + item['videoURL'] + '" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> <p>' + item['description'] + '</p><p>'+doclinks+'</p><a href="#" class="delacc" style="float:right;position:relative;top:-10px;">🗑️</a></div> </div> </div>');
                        else
                            $('.accordion').append('<div class="accordion-item" data-eid="' + index + '"> <div class="accordion-header">' + item['name'] + '</div> <div class="accordion-content"> <div class="video-container"><video width = "315" height = "315" controls autoplay> <source src="'+ GetServiceIcon(item['videoURL']) +'" type="video/mp4">Your browser does not support the video tag. </video> <p>' + item['description'] + '</p><p>'+doclinks+'</p><a href="#" class="delacc" style="float:right;position:relative;top:-10px;">🗑️</a></div> </div> </div>');
                        
                          var videoElement = $(".accordion-item[data-eid='" + index + "']").find('video')[0];

                          // Handle video load errors (403, 404, expired URLs)
                          $(videoElement).on('error', function () {
                              console.log('Video failed to load:', item['videoURL']);
                              handleExpiredVideo(this, item['videoURL'], index);
                          });

                          // Also handle source errors
                          $(videoElement).find('source').on('error', function () {
                              console.log('Video source failed to load:', item['videoURL']);
                              handleExpiredVideo(videoElement, item['videoURL'], index);
                          });

                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      }
                }

                function ShowPrototypeVideo(index)
                {        
                // Stop all HTML5 videos on the page first
                document.querySelectorAll('video').forEach(video => {
                    video.pause();
                });            

                      var item = prototypes[index];//['videoUrl']

                      index='p_'+index;

                      if ($(".accordion-item[data-eid='" + index + "']").length)
                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      else
                      {
                          var doclinks = '';//item['links'].length ? '<a target="_blank" href="'+item['links'][0]+'" style="margin-right:20px">Documentation</a>' : '';
                          
                          if (item['videoUrl'] && item['videoUrl'].toLowerCase().includes('youtube')) 
                            $('.accordion .accordion-item:eq(0)').append('<div class="accordion-item" data-eid="' + index + '"> <div class="accordion-header">' + item['title'] + '</div> <div class="accordion-content"> <div class="video-container"> <iframe width="360" height="215" src="' + item['videoUrl'] + '&autoplay=1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> <p>Creating resources for ' + item['description'] + '</p><p>'+doclinks+'</p><a href="#" class="delacc" style="float:right;position:relative;top:-10px;">🗑️</a></div> </div> </div>');
                          else
                            $('.accordion .accordion-item:eq(0)').append('<div class="accordion-item" data-eid="' + index + '"> <div class="accordion-header">' + item['title'] + '</div> <div class="accordion-content"> <div class="video-container"><video width = "315" height = "315" controls autoplay > <source src="' + item['videoUrl'] + '" type="video/mp4">Your browser does not support the video tag. </video> <p>' + item['description'] + '</p><p>' + doclinks + '</p><a href="#" class="delacc" style="float:right;position:relative;top:-10px;">🗑️</a></div> </div> </div>');

                            // Add error handler for the video element
                          var videoElement = $(".accordion-item[data-eid='" + index + "']").find('video')[0];

                          // Handle video load errors (403, 404, expired URLs)
                          $(videoElement).on('error', function () {
                              console.log('Video failed to load:', item['videoUrl']);
                              handleExpiredVideo(this, item['videoUrl'], index);
                          });

                          // Also handle source errors
                          $(videoElement).find('source').on('error', function () {
                              console.log('Video source failed to load:', item['videoUrl']);
                              handleExpiredVideo(videoElement, item['videoUrl'], index);
                          });

                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      }
                }

                function handleExpiredVideo(videoElement, src, prototypeId) {
                        console.log('Handling expired video for:', prototypeId);

                        const isSigV2 = src && (src.includes('Signature=') || src.includes('AWSAccessKeyId='));
                        const isSigV4 = src && src.includes('X-Amz-Signature');

                        if (isSigV2 || isSigV4) {
                            console.log('Detected presigned video URL - attempting to regenerate');

                            // Extract S3 key from the URL
                            const match = src.match(/amazonaws\.com\/([^?]+)/);
                            if (match) {
                                const key = decodeURIComponent(match[1]);

                                console.log('Extracted video S3 key:', key);

                                // Show loading message
                                $(videoElement).siblings('.video-error-msg').html(
                                    '⏳ Video URL expired. Regenerating...'
                                ).show();

                                // Call API to regenerate
                                $.ajax({
                                    url: 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/regenerate-urls',
                                    method: 'POST',
                                    contentType: 'application/json',
                                    data: JSON.stringify({ keys: [key] }),
                                    success: function (response) {
                                        console.log('Video URL regeneration response:', response);

                                        if (response.urls && response.urls[key]) {
                                            const newUrl = response.urls[key];
                                            console.log('Successfully regenerated video URL');

                                            // Update the video source
                                            $(videoElement).find('source').attr('src', newUrl);

                                            // Reload the video
                                            videoElement.load();
                                            videoElement.play();

                                            // Update stored metadata
                                            updateStoredUrl(key, newUrl);

                                            // Hide error message
                                            $(videoElement).siblings('.video-error-msg').hide();

                                            // Show success message briefly
                                            $(videoElement).siblings('.video-error-msg').html(
                                                '✅ Video URL regenerated successfully'
                                            ).show().delay(3000).fadeOut();

                                        } else {
                                            console.error('No URL in response for video key:', key);
                                        //   showVideoPlaceholder(videoElement);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        console.error('Failed to regenerate video URL:', error);
                                        console.error('Response:', xhr.responseText);
                                      //  showVideoPlaceholder(videoElement);
                                    }
                                });
                            } else {
                                console.error('Could not extract S3 key from video URL');
                            //   showVideoPlaceholder(videoElement);
                            }
                        } else {
                            console.log('Not a presigned video URL');
                          // showVideoPlaceholder(videoElement);
                        }
                    }

                function getRandomFloat(min, max) {
                    return Math.random() * (max - min) + min;
                }     
                const getRandomNumber = (min, max) => {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                }

                // Cookie helper functions
                function setCookie(name, value, days) {
                    const expires = new Date();
                    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
                    document.cookie = name + '=' + value + ';expires=' + expires.toUTCString() + ';path=/';
                }

                function getCookie(name) {
                    const nameEQ = name + '=';
                    const ca = document.cookie.split(';');
                    for(let i = 0; i < ca.length; i++) {
                        let c = ca[i];
                        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
                    }
                    return null;
                }

                function isDataStale() {
                    const dataTimestamp = getCookie('leap_data_timestamp');
                    if (!dataTimestamp) return true;
                    
                    const dataDate = new Date(parseInt(dataTimestamp));
                    const now = new Date();
                    const daysDiff = (now - dataDate) / (1000 * 60 * 60 * 24);
                    
                    return daysDiff > 6;
                }

                function hasActivePrototypes() {
                    if (!prototypes || prototypes.length === 0) return false;
                    return prototypes.some(prototype => prototype.active === true);
                }

                function deployPrototype(id) {
                $('.prototype-card[data-id="' + id + '"]').find('.status-msg').html('Loading...');
            const card = $(".prototype-card[data-id='"+id+"']");
            const cardContent = card.find('.card-content');
            const progressBar = card.find('.progress-bar');
            const progressFill = card.find('.progress-fill');
            const deploymentInfo = card.find('.deployment-info');
            const architectureDiagram = card.find('.architecture-diagram');

            var pindex = 0;

            for (var i = 0; i < prototypes.length; i++)
                if (prototypes[i]['id'] == id) {
                    pindex = i;
                    break;
                }
    
                var requiredmodels = prototypes[pindex]['requiredModels']; //['amazon.nova-pro-v1:0','amazon.titan-embed-text-v1'];//

                
            //alert(requiredmodels.length);
                if (requiredmodels && (requiredmodels.length>0))
                {
                    var reqmodstring = requiredmodels.join(',');  
                    var reqsfound = false;

                    for (var i = 0; i < requiredmodels.length; i++)
                        {
                            reqsfound = false;
                            fulldata["models_access"].forEach(model => {
                                if ((model.enabled) && (requiredmodels[i] == model.id)) 
                                    {
                                        console.log('found: '+ requiredmodels[i]+' '+ model.id);
                                        reqsfound=true;
                                    }
                            });

                            if (!reqsfound)
                            {
                                alert('This prototype requires the following models to be enabled first: '+ reqmodstring);
                            $('#editmodels').trigger('click');
                                return;
                            }
                        }
                }
            
            if ($(".prototype-card[data-id='"+id+"']").find('.modelsel').val() && $(".prototype-card[data-id='"+id+"']").find('.modelsel').val().includes('embed'))
            {
                alert('You cannot choose a text embedding model as the main LLM, please choose another');
                return;
            }

            launching=true;

            // Add expanded class for smooth transition
            card.addClass('expanded');

            deployPrototypeTemplate(id);
            
            // Hide card content, show progress bar
            cardContent.fadeOut();
            $(card).addClass('active');
            progressBar.fadeIn();

              var pindex = 0;

              for (var i = 0; i < prototypes.length; i++)
                  if (prototypes[i]['id'] == id) {
                      pindex = i;
                      break;
                  }
            
            // Show deployment progress
            let progress = 0;
            let totsecs = prototypes[pindex]['estimatedSetupTime'] ? prototypes[pindex]['estimatedSetupTime'] : 120;
            let totalIntervals = Math.ceil(totsecs * 1000 / 500); // Convert seconds to number of 500ms intervals
            let baseTick = 85 / (totalIntervals * 0.85); // 85% of progress over 85% of time
            let finalTick = 15 / (totalIntervals * 0.15); // 15% of progress over 15% of time

            const interval = setInterval(() => {
                if (progress < 85) {
                    // Add variability in the first 85% of progress
                    progress = progress + getRandomFloat(baseTick * 0.5, baseTick * 1.5);
                } else {
                    // Steady progress for the final 15%
                    progress = progress + finalTick;
                }

                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);

                    
                    progressFill.css('width', progress + "%");

                    setTimeout(() => {
                        
                        console.log("Prototype loading complete!");
                        if (launching)
                          $('.prototype-card[data-id="' + id + '"]').find('.status-msg').html('Almost done...');

                        // Example: showPrototype() or hideLoadingScreen()
                    }, 1000);

                    return; 
                }

                // Update progress bar
                progressFill.css('width', progress + "%");
            }, 500);
        }

        const saveToLocalStorage = (key, dictionary) => {
                try {
                    const serializedData = JSON.stringify(dictionary);
                    localStorage.setItem(key, serializedData);
                    return true;
                } catch (error) {
                    console.error('Error saving to localStorage:', error);
                    return false;
                }
            };

            // Function to load a dictionary from localStorage
            const loadFromLocalStorage = (key, defaultValue = null) => {
                try {
                    const serializedData = localStorage.getItem(key);
                    if (serializedData === null) {
                        return defaultValue;
                    }
                    return JSON.parse(serializedData);
                } catch (error) {
                    console.error('Error loading from localStorage:', error);
                    return defaultValue;
                }
            };

                // Initialize when document is ready
                $(document).ready(() => {

                

                $(document).on('click', '.close-modal', function (e) {
                        e.preventDefault();
                        hideModal();
                    });

                $(document).on('click', '.costdetails', function (e) {
                e.preventDefault();

                var pindex = parseInt($(this).data('index'))-1;

                var deets = prototypes[pindex].costDetailsHTML+'<a href="#" target="_blank" style="color:gray"><i>Note: These are only estimates. For accurate pricing and billing please click here</i></a>';

                //alert(pindex+' '+deets);
               
                showModalCustom('Pricing Breakdown', deets);

            });

                $(document).on('click', '.delacc', function (e) {
                    e.preventDefault();
                    //$(this).parents('.accordion-item').remove();
                     $(this).closest('.accordion-item').remove();                
                    $(".accordion-item").eq(0).find('.accordion-header').click();
                });

                // Handle button clicks
                  $(document).on('click', '.download-q-script-btn', function() {
                      const id = $(this).data('id');
                      const stackName = $(this).data('stack');
                      downloadQDeveloperScript(id, stackName);
                  });

                  $(document).on('click', '.download-q-ready-btn', function() {
                     // const id = $(this).data('id');
                      //const stackName = $(this).data('stack');
                      const id = $(this).closest('.q-developer-buttons-det').data('id');
                      const stackName = $(this).closest('.q-developer-buttons-det').data('stack');

                      downloadPrefilledQDeveloperScript(id, stackName);
                  });
                    
                    var loadedDict = loadFromLocalStorage('myAppState');

            if (loadedDict && (!isDataStale() || hasActivePrototypes()))
            {
                if (isDataStale() && hasActivePrototypes()) {
                    console.log('Data is stale but active prototypes detected - using cached data to maintain consistency');
                }

                fulldata = loadedDict;

                prototypes = loadedDict['prototypes'];
                appinfo = loadedDict["appinfo"];

                models_access = loadedDict["models_access"];

                renderPrototypes();

                var pindex=0;

                prototypes.forEach(prototype => {
                    if (prototype.active)
                    {
                        const card = $(".prototype-card[data-id='" + prototype.id + "']");
                        const cardContent = card.find('.card-content');
                        card.addClass('expanded');
                        cardContent.fadeIn();
                        cardContent.addClass('active');
                          PrototypeDeployed(prototype.id, pindex);

                        if (prototype.active && (prototype.deletetimer))
                        {
                          startCountdownTimer(prototype.id, prototype.deletetimer);
                        }
                    }
                    pindex++;
                });


                var tote = 0;

                for (const model of models_access) {
                    if (model.enabled) {
                        tote = tote + 1;
                        hasaccess = true;
                    }
                }

                if (!hasaccess)
                    showModal("Model Access  <button class='refreshmodels' style='float:right'>Refresh</button>", "You need to have access to at least one model to continue.", models_access);

                $('#editmodels').html(tote + ' models enabled');

                $('#welcomevideo').html('<video width="315" height="560" controls><source id="" src="'+ GetServiceIcon('welcomesmall3')+'" type="video/mp4" >Your browser does not support the video tag.</video ><p>Welcome to LEAP! Watch the video above for a quick intro or launch one of the prototypes to the left. All resources will be created for you with guides on how to customize each.<br>Questions? <a href="https://www.linkedin.com/in/basilfateen/">I\'m here to help</a></p>');


                //alert('loaded cache');
            }
            else
            fetchGithubRepoData();

            $(document).on('click', '.refresh-stats-btn', function() {
                  const prototypeId = $(this).data('id');
                  fetchStats(prototypeId);
              });

               $(document).on('click', '.accordion-header', function () {

                           const accordionItem = this.parentElement;

                           if ($(accordionItem).hasClass('active'))
                          {
                                accordionItem.classList.remove('active');
                              $(accordionItem).find('.accordion-content').css('maxHeight', '');
                              $(accordionItem).find('.accordion-content').css('minHeight', '');
                              return;
                          }

                        // Get all accordion items
                        const allAccordionItems = document.querySelectorAll('.accordion-item');

                        // Remove active class from all items
                        allAccordionItems.forEach(item => {
                            if (item !== accordionItem) {
                                item.classList.remove('active');
                                $(item).find('.accordion-content').css('maxHeight','');
                                $(item).find('.accordion-content').css('minHeight','');
                                //min-height:400px;
                            }
                        });

                        // Toggle active class on clicked item
                        accordionItem.classList.toggle('active');

                        const computedStyle = window.getComputedStyle($(accordionItem).find('.video-container')[0]);
                        const height = parseFloat(computedStyle.height)+15;
                
                        $(accordionItem).find('.accordion-content').css('maxHeight', height+'px');
                        $(accordionItem).find('.accordion-content').css('minHeight','400px');

                });


                $(window).on('load', function() {
                    // Clear any lingering "Deleting..." messages
                    $('.status-msg').html('');
                });

                     

                    $(document).on('click', '#overlay', function(e) {
                     //e.preventDefault();

                        if (e.target === this) {
                        hideModal();
                        }


                      });
        
                    $(document).on('click', '#editmodels', function(e) {
                      e.preventDefault();

                      showModal("Model Access  <button class='refreshmodels' style='float:right'>Refresh</button>", "You need to have access to at least one model to continue.", fulldata["models_access"]);


                    });

                    $(document).on('click', '.refreshmodels', function () {
                        $('.refreshmodels').html('Reloading model access...');
                    // alert('Reloading...');
                        fetchGithubRepoData(); 
                    });
                    
                    $(document).on('click', '.launchbut', function() {

                    if (launching)
                    {
                      alert('Please wait until current launch completes...');
                      return;
                    }

                   

                        if (!$(this).parent().find('.deployment-info').is(':visible')) {
                            const id = $(this).data('id');
                            deployPrototype(id);
                        }
                    });

                   $(document).on('click', '.deletebut', function() {

                   if (deleting)
                    {
                      alert('Please wait until current delete completes...');
                      return;
                    }

                    deleting=true;

                    var id = $(this).data('id');
                    var stackname = $(".prototype-card[data-id='"+id+"']").attr('data-stackname');
                    deleteStack(stackname,id);

                   });
       

                    $(document).on('click', '.service-node', function() {
                        var pindex = $(this).data('index');
                        var service = $(this).data('service');
                        var outputs = prototypes[pindex].outputs;
                        var url = '';

                        if (service === 's3' && outputs.S3BucketName) {
                    url = "https://s3.console.aws.amazon.com/s3/buckets/" + outputs.S3BucketName;
                } else if (service === 'lambda' && outputs.LambdaFunctionName) {
                    url = "https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/" + outputs.LambdaFunctionName;
                } else if (service === 'apigateway' && outputs.ApiEndpoint) {
                    url = "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/" + outputs.ApiEndpoint;
                } else   if (service === 'bedrock') {
                    url = "https://us-east-1.console.aws.amazon.com/bedrock/home" ;
                }

                        if (url) {
                            window.open(url, '_blank').focus();
                        }
                    });

                    $(document).on('click', '.explainer-link', function() {
                        ShowExplainer($(this).data('index'));
                    });
                            $(document).on('click', '.prototype-demo-video', function () {
                        ShowPrototypeVideo(parseInt($(this).data('index'))-1);
                    });
                });
            </script>
            </body>
            </html>

  ContentUploader:
    Type: AWS::Lambda::Function
    DependsOn: GetGithubRepoApiDeployment
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt ContentUploaderRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      s3 = boto3.client('s3')
                      bucket = event['ResourceProperties']['BucketName']
                      body = event['ResourceProperties']['Body']
                      
                      # Upload protected content
                      s3.put_object(
                          Bucket=bucket,
                          Key='protected.html',
                          Body=body,
                          ContentType='text/html'
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Content uploaded successfully'
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  

  # Cognito user creator
  CognitoUserCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                Resource: !GetAtt UserPool.Arn

  CognitoUserCreator:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt CognitoUserCreatorRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      user_pool_id = event['ResourceProperties']['UserPoolId']
                      email = event['ResourceProperties']['AdminEmail']
                      password = event['ResourceProperties']['InitialPassword']
                      
                      cognito = boto3.client('cognito-idp')
                      
                      try:
                          cognito.admin_create_user(
                              UserPoolId=user_pool_id,
                              Username=email,
                              UserAttributes=[
                                  {'Name': 'email', 'Value': email},
                                  {'Name': 'email_verified', 'Value': 'true'}
                              ],
                              MessageAction='SUPPRESS'
                          )
                      except cognito.exceptions.UsernameExistsException:
                          print(f"User {email} already exists")
                      
                      time.sleep(2)
                      
                      cognito.admin_set_user_password(
                          UserPoolId=user_pool_id,
                          Username=email,
                          Password=password,
                          Permanent=True
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': f'User {email} configured successfully'
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  CreateCognitoUser:
    Type: Custom::CognitoUser
    DependsOn: UserPool
    Properties:
      ServiceToken: !GetAtt CognitoUserCreator.Arn
      UserPoolId: !Ref UserPool
      AdminEmail: !Ref AdminEmail
      InitialPassword: !Ref InitialPassword

  InitiateStackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InitiateStackFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
              }

              try:
                  body = json.loads(event['body'])
                  template_key = body.get('templateKey')
                  template_bucket = body.get('templateBucket')
                  replacements = body.get('replacements', [])
                  #len(replacements)
                  if len(replacements):
                      template_body=''
                      # Read content from S3
                      try:
                          s3 = boto3.client('s3')
                          response = s3.get_object(Bucket=template_bucket, Key=template_key)
                          
                          # Handle large files by streaming
                          chunk_size = 1024 * 1024  # 1MB chunks
                          content = []
                          stream = response['Body']
                          
                          for chunk in iter(lambda: stream.read(chunk_size), b''):
                              content.append(chunk)
                          
                          template_body = b''.join(content).decode('utf-8')
                          
                          result = template_body
                          
                          # Perform replacements
                          for item in replacements:
                              
                              target = item.get('Target', '')
                              replacement = item.get('Replacement', '')
                              
                              if target:
                                  # Count occurrences before replacement
                                  occurrences = result.count(target)
                                  
                                  # Perform replacement
                                  new_result = result.replace(target, replacement)
                                  
                                  result = new_result
                          
                          #template_body=result
                          s3.put_object(
                              Bucket=template_bucket,
                              Key=template_key,
                              Body=result.encode('utf-8')
                          )

                          
                      except Exception as e:
                          
                          return {
                              'statusCode': 404,
                              'body': f"error: {e}"
                          }
                          
                      #stack_params = {
                      #    'TemplateBody': template_body
                      #}
                      stack_params = {
                          'TemplateURL': f'https://{template_bucket}.s3.amazonaws.com/{template_key}'
                      }

                  elif template_key and template_bucket:
                      stack_params = {
                          'TemplateURL': f'https://{template_bucket}.s3.amazonaws.com/{template_key}'
                      }
                  else:
                      raise ValueError("Either templateBody or templateKey+templateBucket must be provided")

                  stack_name = f"WebAppStack{uuid.uuid4().hex[:8]}"
                  logger.info(f"Creating stack: {stack_name}")
                  
                  stack_params.update({
                      'StackName': stack_name,
                      'Capabilities': ['CAPABILITY_NAMED_IAM','CAPABILITY_NAMED_IAM','CAPABILITY_AUTO_EXPAND']
                  })
                  
          
                  response = cloudformation.create_stack(**stack_params)

                  logger.info(f"Stack creation initiated: {response['StackId']}")

                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Stack creation initiated',
                          'stackId': response['StackId'],
                          'stackName': stack_name
                      })
                  }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  CheckStackStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CheckStackStatusFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')

              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
              }

              try:
                  body = json.loads(event['body'])
                  stack_name = body['stackName']

                  logger.info(f"Checking status for stack: {stack_name}")

                  stack = cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]
                  status = stack['StackStatus']
                  outputs = {output['OutputKey']: output['OutputValue'] for output in stack.get('Outputs', [])}

                  logger.info(f"Stack status: {status}")

                  response_body = {
                      'status': status,
                      'stackName': stack_name,
                      'outputs': outputs
                  }

                  if status.endswith('_FAILED'):
                      events = cloudformation.describe_stack_events(StackName=stack_name)['StackEvents']
                      for event in reversed(events):
                          if 'ResourceStatusReason' in event and event['ResourceStatus'].endswith('_FAILED'):
                              response_body['error'] = event['ResourceStatusReason']
                              logger.error(f"Stack creation failed: {response_body['error']}")
                              break

                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps(response_body)
                  }

              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  DeleteStackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteStackFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,DELETE'
              }
              
              try:
                  body = json.loads(event['body'])
                  stack_name = body.get('stackName')
                  
                  if not stack_name:
                      raise ValueError("stackName must be provided")
                      
                  logger.info(f"Deleting stack: {stack_name}")
                  
                  response = cloudformation.delete_stack(
                      StackName=stack_name
                  )
                  
                  logger.info(f"Stack deletion initiated for {stack_name}")
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Stack deletion initiated',
                          'stackName': stack_name
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  SelfDestructFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SelfDestructFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import time
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              # Create clients
              sfn = boto3.client('stepfunctions')
              iam = boto3.client('iam')

              DELETE_STACK_FUNCTION_ARN = '${DeleteStackFunction.Arn}'


              body = json.loads(event['body'])
              stack_name = body.get('stackName')
              
              # Create IAM Role for Step Functions
              role_name = f'StepFunctionsRole-{int(time.time())}'
              
              # Trust policy for Step Functions
              trust_policy = {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": "states.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                      }
                  ]
              }
              
              try:
                  # Create IAM role
                  role_response = iam.create_role(
                      RoleName=role_name,
                      AssumeRolePolicyDocument=json.dumps(trust_policy)
                  )
                  
                  logger.info(f"role created: {role_name}")

                  
                  # Allow Step Functions to invoke Lambda
                  lambda_policy = {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "lambda:InvokeFunction"
                              ],
                              "Resource": [
                                  DELETE_STACK_FUNCTION_ARN
                              ]
                          }
                      ]
                  }
                  
                  # Attach the policy to the role
                  iam.put_role_policy(
                      RoleName=role_name,
                      PolicyName='StepFunctionsLambdaInvoke',
                      PolicyDocument=json.dumps(lambda_policy)
                  )
                  
                  # Wait for role to propagate
                  time.sleep(10)
                  
                  logger.info(f"creating state_machine_definition")
                  
                  # State machine definition
                  state_machine_definition = {
                      "Comment": "A state machine that waits and then invokes a Lambda function with parameters",
                      "StartAt": "WaitState",
                      "States": {
                          "WaitState": {
                              "Type": "Wait",
                              "Seconds": 7200,
                              "Next": "InvokeLambda"
                          },
                          "InvokeLambda": {
                              "Type": "Task",
                              "Resource": "arn:aws:states:::lambda:invoke",
                              "Parameters": {
                                  "FunctionName": DELETE_STACK_FUNCTION_ARN,
                                  "Payload": {
                                      "body": "{\"stackName\": \""+stack_name+"\"}"
                                  }
                              },
                              "End": True
                          }
                      }
                  }
                  
                  # Create state machine
                  response = sfn.create_state_machine(
                      name=f'DelayedLambdaExecution-{int(time.time())}',
                      definition=json.dumps(state_machine_definition),
                      roleArn=role_response['Role']['Arn'],
                      type='STANDARD'
                  )
                  
                  logger.info(f"created state_machine_definition")

                  
                  # Start execution of the state machine
                  execution = sfn.start_execution(
                      stateMachineArn=response['stateMachineArn']
                  )

                  headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'State machine created and executed successfully',
                          'stateMachineArn': response['stateMachineArn'],
                          'executionArn': execution['executionArn']
                      })
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Runtime: python3.8
      Timeout: 30

  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: DeployStackAPI

  InitiateStackResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'initiate'

  InitiateStackMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref InitiateStackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InitiateStackFunction.Arn}/invocations'

  InitiateStackOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref InitiateStackResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  CheckStatusResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'check-status'

  CheckStatusMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref CheckStatusResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckStackStatusFunction.Arn}/invocations'

  CheckStatusOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CheckStatusResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  DeleteStackResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'delete-stack'

  DeleteStackMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref DeleteStackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteStackFunction.Arn}/invocations'

  DeleteStackOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref DeleteStackResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'


  SelfDestructResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'self-destruct'

  SelfDestructMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SelfDestructResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SelfDestructFunction.Arn}/invocations'

  SelfDestructOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SelfDestructResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'


  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - InitiateStackMethod
      - InitiateStackOptionsMethod
      - CheckStatusMethod
      - CheckStatusOptionsMethod
      - DeleteStackMethod
      - DeleteStackOptionsMethod
      - SelfDestructMethod
      - SelfDestructOptionsMethod
      - StatsMethod
      - StatsOptionsMethod
      - RegenerateUrlsMethod         
      - RegenerateUrlsOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InitiateStackFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeCheckStatus:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckStackStatusFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeDeleteStack:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteStackFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeSelfDestruct:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SelfDestructFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  GetGithubRepoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetGithubRepo
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import urllib.request
          import io
          import zipfile
          from datetime import datetime
          import urllib.parse
          import boto3
          import os
          from pathlib import Path
          from typing import List, Dict

          def check_bedrock_model_access(model_ids: List[Dict] = None) -> List[Dict]:
              try:
                  bedrock_runtime = boto3.client('bedrock-runtime')
                  bedrock = boto3.client('bedrock')
                  
                  # Get available models
                  models_response = bedrock.list_foundation_models()
                  available_models = {
                      model['modelId']: model
                      for model in models_response['modelSummaries']
                  }
                  
                  # Process each model in the input list
                  for model in model_ids:
                      try:
                          model_id = model['id']
                          
                          if model_id not in available_models:
                              model['enabled'] = False
                              model['reason'] = 'Model not available in this region'
                              continue
                          
                          # Try direct access first
                          success = test_model_access(bedrock_runtime, model_id, model)
                          
                          # If direct access fails with inference profile error, try common profile patterns
                          if not success and "inference profile" in model.get('reason', '').lower():
                              profile_success = try_inference_profiles(bedrock_runtime, model_id, model)
                              if not profile_success:
                                  model['enabled'] = False
                                  model['reason'] = 'Model requires inference profile but none found accessible'
                          
                      except Exception as e:
                          print(f"Unexpected error checking {model_id}: {str(e)}")
                          model['enabled'] = False
                          model['reason'] = f'Error: {str(e)}'
                          
                  return model_ids
              
              except Exception as e:
                  print(f"Error initializing Bedrock client: {str(e)}")
                  if model_ids:
                      for model in model_ids:
                          model['enabled'] = False
                          model['reason'] = f'Client initialization error: {str(e)}'
                  return model_ids or []

          def test_model_access(bedrock_runtime, identifier: str, model: dict, is_profile: bool = False) -> bool:
              """Test access to a model or inference profile"""
              try:
                  print(identifier)
                  if is_embedding_model(identifier):
                      success = test_embedding_model_access(bedrock_runtime, identifier, model)
                      if success:
                          model['enabled'] = True
                          model['reason'] = 'Embed Model accessible via direct access'
                          print('Embed Model accessible via direct access')
                          return True
                  elif is_text_model_id(identifier):
                      bedrock_runtime.converse(
                          modelId=identifier,
                          messages=[
                              {
                                  'role': 'user',
                                  'content': [{'text': 'Hi'}]
                              }
                          ],
                          inferenceConfig={
                              'maxTokens': 1,
                              'temperature': 0
                          }
                      )
                      model['enabled'] = True
                      model['reason'] = f'Model accessible via {"inference profile" if is_profile else "direct access"}'
                      print(f'Model accessible via {"inference profile" if is_profile else "direct access"}')
                      if is_profile:
                          model['inference_profile_id'] = identifier
                      return True
                  else:
                      # For non-text models, just check if they exist
                      model['enabled'] = True
                      model['reason'] = 'Model available (non-text model)'
                      return True
                      
              except bedrock_runtime.exceptions.AccessDeniedException:
                  model['enabled'] = False
                  model['reason'] = 'Access denied - model not enabled for account'
                  print(model['reason'])

                  return False
              except bedrock_runtime.exceptions.ValidationException as e:
                  error_msg = str(e).lower()
                  if "inference profile" in error_msg:
                      model['enabled'] = False
                      model['reason'] = 'Requires inference profile'
                      print(model['reason'])
                      return False
                  else:
                      model['enabled'] = False
                      model['reason'] = f'Validation error: {str(e)}'
                      print(model['reason'])
                      return False
              except bedrock_runtime.exceptions.ThrottlingException:
                  model['enabled'] = False
                  model['reason'] = 'Throttling - model may be enabled but rate limited'
                  print(model['reason'])
                  return False
              except Exception as e:
                  model['enabled'] = False
                  model['reason'] = f'Error: {str(e)}'
                  print(model['reason'])
                  return False

          def try_inference_profiles(bedrock_runtime, model_id: str, model: dict) -> bool:
              """Try common inference profile patterns for the model"""
              
              # Common inference profile patterns based on AWS documentation
              profile_patterns = []
              
              if 'anthropic.claude' in model_id:
                  # For Claude models, try common profile patterns
                  base_model = model_id.split(':')[0]  # Remove version suffix
                  profile_patterns = [
                      f"us.{base_model}",
                      f"eu.{base_model}",
                      base_model.replace('anthropic.', 'anthropic.claude-'),
                      f"cross-region.{base_model}"
                  ]
              elif 'meta.llama' in model_id:
                  base_model = model_id.split(':')[0]
                  profile_patterns = [
                      f"us.{base_model}",
                      f"eu.{base_model}"
                  ]
              
              # Try each potential profile
              for profile_id in profile_patterns:
                  try:
                      success = test_model_access(bedrock_runtime, profile_id, model, is_profile=True)
                      if success:
                          return True
                  except Exception:
                      continue
              
              return False

          def is_embedding_model(model_id: str) -> bool:
              """Check if the model is an embedding model"""
              embedding_patterns = [
                  'embed',
                  'embedding'
              ]
              return any(pattern in model_id.lower() for pattern in embedding_patterns)

          def test_embedding_model_access(bedrock_runtime, model_id: str, model: dict) -> bool:
              """Test access to embedding models"""
              try:
                  # Create embedding-specific payload
                  if 'amazon.titan-embed' in model_id:
                      payload = {
                          "inputText": "test"
                      }
                  elif 'cohere.embed' in model_id:
                      payload = {
                          "texts": ["test"],
                          "input_type": "search_document"
                      }
                  else:
                      # Generic embedding payload
                      payload = {
                          "inputText": "test"
                      }
                  
                  response = bedrock_runtime.invoke_model(
                      modelId=model_id,
                      body=json.dumps(payload),
                      contentType='application/json'
                  )
                  
                  # Check if we got a valid response
                  response_body = json.loads(response['body'].read())
                  if 'embedding' in response_body or 'embeddings' in response_body:
                      model['enabled'] = True
                      model['reason'] = 'Embedding model accessible'
                      return True
                  else:
                      model['enabled'] = False
                      model['reason'] = 'Unexpected response format from embedding model'
                      return False
                      
              except bedrock_runtime.exceptions.AccessDeniedException:
                  model['enabled'] = False
                  model['reason'] = 'Access denied - model not enabled for account'
                  return False
              except bedrock_runtime.exceptions.ValidationException as e:
                  model['enabled'] = False
                  model['reason'] = f'Validation error: {str(e)}'
                  return False
              except bedrock_runtime.exceptions.ThrottlingException:
                  model['enabled'] = False
                  model['reason'] = 'Throttling - model may be enabled but rate limited'
                  return False
              except Exception as e:
                  model['enabled'] = False
                  model['reason'] = f'Error: {str(e)}'
                  return False

          def is_text_model_id(identifier: str) -> bool:
              """Check if the identifier is for a text-based model"""
              identifier_lower = identifier.lower()
              
              text_model_patterns = [
                  'anthropic.claude',
                  'amazon.titan-text',
                  'ai21.j2',
                  'cohere.command',
                  'meta.llama',
                  'mistral',
                  'nova'
              ]
              
              exclude_patterns = [
                  'embed',
                  'stable-diffusion',
                  'titan-image'
              ]
              
              is_text = any(pattern in identifier_lower for pattern in text_model_patterns)
              is_excluded = any(pattern in identifier_lower for pattern in exclude_patterns)
              
              return is_text and not is_excluded

          def get_content_type(filename):
              extension = os.path.splitext(filename)[1].lower()
              content_types = {
                  '.txt': 'text/plain',
                  '.html': 'text/html',
                  '.htm': 'text/html',
                  '.css': 'text/css',
                  '.js': 'application/javascript',
                  '.json': 'application/json',
                  '.xml': 'application/xml',
                  '.md': 'text/markdown',
                  '.png': 'image/png',
                  '.jpg': 'image/jpeg',
                  '.jpeg': 'image/jpeg',
                  '.gif': 'image/gif',
                  '.pdf': 'application/pdf',
                  '.zip': 'application/zip'
              }
              return content_types.get(extension, 'application/octet-stream')
              
          def get_public_url(bucket_name, s3_key, region='us-east-1'):
              return f"https://{bucket_name}.s3.{region}.amazonaws.com/{s3_key}"

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET,OPTIONS',
                  'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                  'Content-Type': 'application/json'
              }

              models_to_check = [   
                  {'id':'anthropic.claude-3-5-sonnet-20240620-v1:0','name':'Claude 3.5 Sonnet','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'anthropic.claude-3-haiku-20240307-v1:0','name':'Claude 3 Haiku','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.nova-pro-v1:0','name':'Amazon Nova Pro','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.nova-lite-v1:0','name':'Amazon Nova Lite','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.nova-micro-v1:0','name':'Amazon Nova Micro','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.titan-embed-text-v1','name':'Amazon Titan Embeddings','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'meta.llama3-8b-instruct-v1:0','name':'Llama 3 8B','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'mistral.mistral-7b-instruct-v0:2','name':'Mistral 7B','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'}
              ]
              
              # Check access
              access_results = check_bedrock_model_access(models_to_check)

              try:
                  download_url = "https://github.com/bfateen/genaiprototyping/archive/refs/heads/main.zip"
                  print(f"Downloading from: {download_url}")
                  
                  bucket_name = "${WebsiteBucket}"
                  folder_name = "protoscripts"
                  assets_folder_name = "assets"
                  
                  with urllib.request.urlopen(download_url) as response:
                      zip_content = response.read()
                  
                  with zipfile.ZipFile(io.BytesIO(zip_content)) as zip_ref:
                      all_files = zip_ref.namelist()
                      root_dir = all_files[0].split('/')[0]
                      processed_files = []
                      protos = []
                      
                      prototypes_prefix = f"{root_dir}/prototypes/"
                      assets_prefix = f"{root_dir}/assets/"
                      
                      maininfo = ""
                      
                      for filename in all_files:
                          if 'appinfo' in filename:
                              with zip_ref.open(filename) as f:
                                  maininfo = json.loads(f.read().decode('utf-8'))
                                  maininfo['bucket']=bucket_name
                                  
                      for filename in all_files:
                          if filename.startswith(assets_prefix):
                              try:
                                  relative_path = filename.replace(f"{root_dir}/assets/", "")
                                  with zip_ref.open(filename) as f:
                                      file_info = zip_ref.getinfo(filename)
                                      content = f.read()
                                      s3_key = f"{assets_folder_name}/{relative_path}"
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      print("s3_key: "+s3_key)
                                      
                                      purl = s3.generate_presigned_url(
                                          'get_object',
                                          Params={
                                              'Bucket': bucket_name,
                                              'Key': s3_key
                                          },
                                          ExpiresIn=10
                                      )
                                      
                                      public_url = get_public_url(bucket_name, s3_key)
                                      processed_files.append({
                                          'name': Path(s3_key).stem,
                                          'size': file_info.file_size,
                                          'last_modified': datetime(*file_info.date_time).isoformat(),
                                          's3_path': f"s3://{bucket_name}/{s3_key}",
                                          'public_url': purl
                                      })
                                      
                              except Exception as e:
                                  print(f"Error processing asset file '{filename}': {str(e)}")
                          
                          if filename.startswith(prototypes_prefix) and filename.endswith('/') and not filename.endswith('prototypes/'):
                              current_prototype = Path(filename).stem
                              with zip_ref.open(filename+"protoinfo.json") as f:
                                  obj = json.loads(f.read().decode('utf-8'))
                                  obj['id'] = current_prototype
                                  # Get signed url for icon
                                  
                                  iconpath = obj['icon']
                                  fipath = "genaiprototyping-main/prototypes/" + current_prototype +"/"+ iconpath
                                  print('iconpath '+fipath)
                                  
                                  with zip_ref.open(fipath) as fi:
                                      icontent = fi.read()
                                      s3_key = folder_name+"/" + current_prototype +"/"+ iconpath
                                      relative_path = fipath.replace(prototypes_prefix, '')
                                      
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      purl = s3.generate_presigned_url(
                                          'get_object',
                                          Params={
                                              'Bucket': bucket_name,
                                              'Key': s3_key
                                          },
                                          ExpiresIn=10 #604800
                                      )
                                      
                                      obj['iconurl'] = purl

                                  videopath = obj['videoUrl']

                                  if not videopath.startswith('http'):
                                      fipath = "genaiprototyping-main/prototypes/" + current_prototype +"/"+ videopath
                                      print('iconpath '+fipath)
                                      
                                      with zip_ref.open(fipath) as fi:
                                          icontent = fi.read()
                                          s3_key = folder_name+"/" + current_prototype +"/"+ videopath
                                          relative_path = fipath.replace(prototypes_prefix, '')
                                          
                                          s3.put_object(
                                              Bucket=bucket_name,
                                              Key=s3_key,
                                              Body=content,
                                              ContentType=get_content_type(relative_path)
                                          )
                                          
                                          purl = s3.generate_presigned_url(
                                              'get_object',
                                              Params={
                                                  'Bucket': bucket_name,
                                                  'Key': s3_key
                                              },
                                              ExpiresIn=10 #604800
                                          )
                                          
                                          obj['videoUrl'] = purl
                                  
                                  protos.append(obj)
                          
                          if filename.startswith(prototypes_prefix) and not filename.endswith('/'):
                              try:
                                  file_info = zip_ref.getinfo(filename)
                                  relative_path = filename.replace(prototypes_prefix, '')
                                  
                                  with zip_ref.open(filename) as f:
                                      content = f.read()
                                      s3_key = f"{folder_name}/{relative_path}"
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      
                              except Exception as e:
                                  print(f"Error processing prototype file '{filename}': {str(e)}")
                  
                  processed_files.sort(key=lambda x: x['name'])
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'appinfo': maininfo,
                          'prototypes': protos,
                          'file_count': len(processed_files),
                          'files': processed_files,
                          'models_access':access_results
                      })
                  }
                  
              except Exception as e:
                  print(f"Unexpected error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }

      Runtime: python3.8
      Timeout: 300
      MemorySize: 256

  GetGithubRepoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GetGithubRepoApi
      Description: API for GetGithubRepo Lambda function

  GetGithubRepoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ParentId: !GetAtt GetGithubRepoApi.RootResourceId
      PathPart: 'default'

  GetGithubRepoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ResourceId: !Ref GetGithubRepoResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGithubRepoFunction.Arn}/invocations'

  GetGithubRepoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ResourceId: !Ref GetGithubRepoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GetGithubRepoApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetGithubRepoMethod
      - GetGithubRepoOptionsMethod
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      StageName: default

  GetGithubRepoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetGithubRepoFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetGithubRepoApi}/*'

# STATS from DYNAMODB

  StatsFetcherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: '*'  
                
              # We'll need to access any prototype's DynamoDB table

  StatsFetcherFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt StatsFetcherRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          from decimal import Decimal
          import time

          # Price per million tokens (as of March 2025)

          MODEL_PRICING = {
            "amazon.titan-text-premier-v1:0": {"input": Decimal('3.00'), "output": Decimal('6.00')},
            "anthropic.claude-3-7-sonnet-20250219-v1:0": {"input": Decimal('5.50'), "output": Decimal('16.50')},
            "anthropic.claude-3-5-sonnet-20241022-v2:0": {"input": Decimal('3.00'), "output": Decimal('15.00')},
            "anthropic.claude-3-5-haiku-20241022-v1:0": {"input": Decimal('0.25'), "output": Decimal('1.25')},
            "anthropic.claude-3-opus-20240229-v1:0": {"input": Decimal('15.00'), "output": Decimal('75.00')},
            "amazon.nova-pro-v1:0": {"input": Decimal('0.80'), "output": Decimal('3.20')},
            "amazon.nova-lite-v1:0": {"input": Decimal('0.06'), "output": Decimal('0.24')},
            "amazon.nova-micro-v1:0": {"input": Decimal('0.035'), "output": Decimal('0.14')},
            "amazon.titan-text-express-v1": {"input": Decimal('0.20'), "output": Decimal('0.60')},
            "anthropic.claude-3-5-sonnet-20240620-v1:0": {"input": Decimal('3.00'), "output": Decimal('15.00')},
            "anthropic.claude-3-haiku-20240307-v1:0": {"input": Decimal('0.25'), "output": Decimal('1.25')},
            "amazon.titan-embed-text-v1": {"input": Decimal('0.02'), "output": Decimal('0.00')},
            "meta.llama3-8b-instruct-v1:0": {"input": Decimal('0.30'), "output": Decimal('0.60')},
            "mistral.mistral-7b-instruct-v0:2": {"input": Decimal('0.15'), "output": Decimal('0.20')}
          }

          # Helper class to convert Decimal to float for JSON serialization
          class DecimalEncoder(json.JSONEncoder):
              def default(self, o):
                  if isinstance(o, Decimal):
                      return float(o)
                  return super(DecimalEncoder, self).default(o)

          def handler(event, context):
              try:
                  # Parse request
                  body = json.loads(event['body']) if 'body' in event else {}
                  #table_name = 'bedrock-chat-logs-23e6c2d0' 
                  table_name = body.get('tableName')

                  
                  if not table_name:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST'
                          },
                          'body': json.dumps({'error': 'Table name is required'})
                      }
                  
                  # Initialize DynamoDB client
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(table_name)
                  
                  # Scan the table (with projection to reduce data transfer)
                  response = table.scan(
                      ProjectionExpression="latency_ms, bedrock_latency_ms, input_tokens, output_tokens, total_tokens, model_id"
                  )
                  
                  items = response.get('Items', [])
                  
                  # Process the results
                  message_count = len(items)
                  total_input_tokens = Decimal('0')
                  total_output_tokens = Decimal('0')
                  total_latency = Decimal('0')
                  model_usage = {}
                  
                  for item in items:
                      # Count tokens - convert to Decimal to ensure consistent type handling
                      input_tokens = Decimal(str(item.get('input_tokens', 0)))
                      output_tokens = Decimal(str(item.get('output_tokens', 0)))
                      total_input_tokens += input_tokens
                      total_output_tokens += output_tokens
                      
                      # Track latency
                      latency = Decimal(str(item.get('latency_ms', 0)))
                      total_latency += latency
                      
                      # Track model usage for cost calculation
                      model_id = item.get('model_id', 'unknown')
                      if model_id not in model_usage:
                          model_usage[model_id] = {
                              'input_tokens': Decimal('0'),
                              'output_tokens': Decimal('0'),
                              'count': 0
                          }
                      
                      model_usage[model_id]['input_tokens'] += input_tokens
                      model_usage[model_id]['output_tokens'] += output_tokens
                      model_usage[model_id]['count'] += 1
                  
                  # Calculate costs
                  total_cost = Decimal('0')
                  model_costs = {}
                  
                  for model_id, usage in model_usage.items():
                      if model_id in MODEL_PRICING:
                          million = Decimal('1000000')
                          input_cost = (usage['input_tokens'] / million) * MODEL_PRICING[model_id]['input']
                          output_cost = (usage['output_tokens'] / million) * MODEL_PRICING[model_id]['output']
                          model_cost = input_cost + output_cost
                          
                          model_costs[model_id] = {
                              'input_cost': input_cost,
                              'output_cost': output_cost,
                              'total_cost': model_cost,
                              'count': usage['count']
                          }
                          
                          total_cost += model_cost
                  
                  message_count_safe = max(1, message_count)
                  
                  stats = {
                      'message_count': message_count,
                      'total_input_tokens': total_input_tokens,
                      'total_output_tokens': total_output_tokens,
                      'total_tokens': total_input_tokens + total_output_tokens,
                      'average_tokens_per_message': (total_input_tokens + total_output_tokens) / Decimal(str(message_count_safe)),
                      'total_cost_usd': total_cost,
                      'average_cost_per_message': total_cost / Decimal(str(message_count_safe)),
                      'average_latency_ms': total_latency / Decimal(str(message_count_safe)),
                      'model_costs': model_costs
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps(stats, cls=DecimalEncoder)
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps({'error': str(e)})
                  }

  StatsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'get-stats'

  StatsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref StatsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StatsFetcherFunction.Arn}/invocations'

  StatsOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref StatsResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  LambdaApiGatewayInvokeStats:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StatsFetcherFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  RegenerateUrlsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RegeneratePresignedUrls
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = os.environ['BUCKET_NAME']
              
              headers = {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Methods': 'OPTIONS,POST',
                'Content-Type': 'application/json'
              }
              
              try:

                  if event.get('httpMethod') == 'OPTIONS':
                    return {
                        'statusCode': 200,
                        'headers': headers,
                        'body': ''
                    }


                  body = json.loads(event.get('body', '{}'))
                  s3_keys = body.get('keys', [])  # List of S3 keys to regenerate
                  
                  regenerated_urls = {}
                  for key in s3_keys:
                      url = s3.generate_presigned_url(
                          'get_object',
                          Params={
                              'Bucket': bucket_name,
                              'Key': key
                          },
                          ExpiresIn=604800  # 7 days
                      )
                      regenerated_urls[key] = url
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({'urls': regenerated_urls})
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucket

  RegenerateUrlsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'regenerate-urls'

  RegenerateUrlsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref RegenerateUrlsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegenerateUrlsFunction.Arn}/invocations'

  RegenerateUrlsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RegenerateUrlsFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  RegenerateUrlsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref RegenerateUrlsResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

Outputs:
  LoginUrl:
    Description: Click here to access your secure LEAP app
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/